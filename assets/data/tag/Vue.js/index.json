{"hash":"843e47f385d56c2b19388c4509fc534a1d06489c","data":{"tag":{"title":"Vue.js","belongsTo":{"edges":[{"node":{"title":"[번역] The process: Making Vue 3","path":"/the-process-making-vue3/","date":"20. July 2020","timeToRead":8,"description":"Vue.js의 메이저 버전을 준비하며 얻은 교훈들","content":"<blockquote>\n<p>Evan You의 <a href=\"https://increment.com/frontend/making-vue-3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The process: Making Vue 3</a> 번역글입니다. 굳이 이 글이 아니더라도 모든 번역글은 역자의 의도와 상관없이 원문의 내용과 다르게 전달될 수 있으니 원문도 같이 보시는 걸 권해드립니다.</p>\n</blockquote>\n<p>지난 1년동안 Vue 개발팀은 Vue.js의 다음 메이저 버전을 준비해왔으며, 2020년 상반기 release를 목표로 하고 있다. <em>(역주: 참고로 원문은 2020년 5월 3일에 포스팅되었다.)</em> 새로운 메이저 버전은 2018년 말, Vue 2의 코드베이스가 약 2년 반정도 되었을 때 구체화되었다. 소프트웨어 수명치고 그리 오래되지 않았을 수 있지만 해당 기간동안 프론트엔드 환경은 크게 바뀌었고, 다음 두 요소로 인해 Vue의 새로운 메이저 버전을 만들게 되었다.</p>\n<ul>\n<li>주요 브라우저에서 JavaScript 신규 기능들의 가용성을 어느정도 보장함</li>\n<li>시간이 흐르면서 현재 코드베이스의 설계 및 구조에서 오는 문제점들이 드러남</li>\n</ul>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1000 563' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6d540a3f6519b716b96d1304b5605b26'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6d540a3f6519b716b96d1304b5605b26)' width='1000' height='563' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAAEDBAYHCAIF/8QALxAAAgECBQMCBAYDAAAAAAAAAQIDBBEABRIhMQYTQQdxFCIyYRUjNVGBkaHB4f/EABkBAAIDAQAAAAAAAAAAAAAAAAAEAQIFA//EACcRAAIBAwMDAwUAAAAAAAAAAAECAAMRIQQSMUFhoRNR8BRCgbLh/9oADAMBAAIRAxEAPwDpxmClQTYsbDA2rbTbne/7YXFZ6ozHNqJ/hqDJ6ivppoyrTRzaWUtcEcXFhwcZc6s20X/s%2bd1X1nSZXSVk1FDI2Yxjto0sLmJirDUpZb24I98VCf1hkiamq5qempqBVAqC4ckEm23nyNrXO%2bKAlbLDn/UOTVucfA5Y1Q5ip62yRS6SFkjaQC6EgBrAWPzXFr4lM1FmPS9THVUiJWUeuJa2FrxyGK8mhZVO/wCWCLkeOcJ/VlCQ63sclb4U8MQQMDhrE28S9fQVnI2Pt4NrfnzLZSeq%2bcNBVU5jy%2bSpia8c5LAMCotqjG4sb8HcAcb4u3T3V%2bTdTNIKLM5qeraUwxo8mxP2A487XuCLYw%2brhy6l6M/FKRojndYvxMInmdgsR1WVz9IAAO5%2b%2b%2bLZ6SOo6lh7OUwzVB0PUVbISsEVm%2blrAatZFid7XsN8OUaiVkZ6YOCRnt1HuDnMzH9fTVlpO24G3z3%2bZm%2bKwZQwvYi/FsCnUoNitxweRhIlZYwJH1t5bTa/8Y9YJpSHOcw/EoRAtL8AVPcZy3cDb8AbW4/zgrGkWFpaZEmnAsqtJpGobWB3sTuL298TPHGGLO0EehFjIIJWQarAex5xEJxV6h1M6Q1dTM0kdWucM8rOlmSTW2okW8G/jfEqHqui6p/VKiiyyvpo1DIsHZNVa4co/wBIcrcaWFj4PjE71Jy3NM060z7LckQ1NY2byvHCjhZDdiTz4sf6xnM/S9dEjPGsDuHbURURFUPAAOrfck7bYsunVrEmzLweve/Y9Y9qXbepUfav6ibplHT%2bXN0jPUyVNXIs0TTxU8koKiJB%2bWjLbc6RxxxfjFr9F8wo/gszr44a6WQSR0q9iIsyqy6gSOLXHJxzn09mHUeUstNBKtXRqLdqomRdI/ZXJ/5jpL0Fra%2bupsxcSB6aKdO8GszglLgLp2P88c3PGFqS6mm9RarBlY3B6r2HicdRSoVVWttO5cZmxre7E6t/B8e2Fv8AMFseL38YRfkCJ87eNR3/ALOEMqidYTfWylx7Agf7wxF43LSQyzdx1YvtuHYccbA2w/gwYISNVBaenqJokRZAhOrSN/fERMqozU98wR91nExbQL6tjzb7DBgxBUNyJHEkrl9IBMBTxWkN3soGr3th6GMC5O5DkjYC39YMGJkWzHceDEpmWU31qpUb7WJBO38DBgwS0//Z' /%3e%3c/svg%3e\" width=\"1000\" alt=\"image\" data-srcset=\"/blog/assets/static/the-process-making-vue3.82a2fbd.c83568af679d5521d280e854c15cdcb5.jpg 480w, /blog/assets/static/the-process-making-vue3.97c148e.c83568af679d5521d280e854c15cdcb5.jpg 1000w\" data-sizes=\"(max-width: 1000px) 100vw, 1000px\" data-src=\"/blog/assets/static/the-process-making-vue3.97c148e.c83568af679d5521d280e854c15cdcb5.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/the-process-making-vue3.97c148e.c83568af679d5521d280e854c15cdcb5.jpg\" width=\"1000\" alt=\"image\"></noscript></p>\n<hr>\n<h1 id=\"왜-재구현을-하게-되었나\"><a href=\"#%EC%99%9C-%EC%9E%AC%EA%B5%AC%ED%98%84%EC%9D%84-%ED%95%98%EA%B2%8C-%EB%90%98%EC%97%88%EB%82%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>왜 재구현을 하게 되었나</h1>\n<h3 id=\"javascript의-신규-기능-활용\"><a href=\"#javascript%EC%9D%98-%EC%8B%A0%EA%B7%9C-%EA%B8%B0%EB%8A%A5-%ED%99%9C%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JavaScript의 신규 기능 활용</h3>\n<p>ES2015가 표준화되면서 JavaScript가 크게 개선되었고, 주요 브라우저들은 이러한 신규 기능을 지원하기 시작했다. 그 중 일부는 Vue가 가진 기능을 크게 향상시킬 수 있는 기회를 제공했다.</p>\n<p>특히 주목할만한 것은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Proxy</a>인데, 이는 Vue가 object에서 이루어지는 작업들을 intercept 할 수 있게 해준다. Vue의 핵심 기능은 사용자가 정의한 state의 변경을 감지하고 이에 반응하여 DOM을 수정하는 것이다. Vue 2는 state 객체의 속성을 getter와 setter로 대체하여 이러한 반응성을 구현한다. 이를 Proxy로 전환하면 새로운 속성 추가를 감지하지 못하는 등의 제약사항을 제거할 수 있고, 성능 향상을 꾀할 수 있다.</p>\n<p>하지만 Proxy는 오래된 브라우저에서는 완전하게 pollyfill 될 수 없는 기능이며, 이를 활용하기 위해서는 새로운 메이저 버전의 브라우저 지원 범위를 조정해야만 한다는 것을 인지하고 있다.</p>\n<h3 id=\"구조적-문제-해결\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%A0%81-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구조적 문제 해결</h3>\n<p>Vue 2를 유지보수하는 과정에서 기존 구조의 한계로 인해 해결하기 어려운 문제들이 쌓여왔다. 예를 들어 템플릿 컴파일러는 적절한 source-map을 지원하기가 매우 어렵게 구현되어 있다. 또한, Vue 2는 기술적으로 DOM 이외의 플랫폼을 대상으로 고수준의 렌더러 역할을 할 수 있지만, 이를 가능하게 하기 위해 수많은 fork와 중복된 코드를 만들어 냈다. 현재 코드베이스에서 이러한 문제들을 해결하려면 거의 재구현 수준의 매우 위험한 리팩토링이 필요하다.</p>\n<p>이와 동시에, 우리는 다양한 모듈들의 내부와 어디에도 속하지 않는 코드들을 암묵적 결합의 형태로 구현하여 기술 부채를 쌓아왔다. 이로 인해 코드의 일부를 독립적으로 이해하기가 어려워졌으며, contributor들이 사소한 변경을 하는 것에도 확신이 없다는 것을 알게 되었다. 재구현을 하게 되면 이러한 점들을 염두에 두고 코드 구성을 다시 생각할 수 있다.</p>\n<hr>\n<h1 id=\"초기-프로토타이핑-단계\"><a href=\"#%EC%B4%88%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9D%B4%ED%95%91-%EB%8B%A8%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>초기 프로토타이핑 단계</h1>\n<p>우리는 상기 문제들에 대한 솔루션을 검증하는 예비 목표를 세우고 2018년 말에 Vue 3의 프로토타이핑을 시작했다. 이 단계에서 우리는 추가 개발을 위한 견고한 기반을 닦는 것에 중점을 두었다.</p>\n<h3 id=\"typescript로의-전환\"><a href=\"#typescript%EB%A1%9C%EC%9D%98-%EC%A0%84%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TypeScript로의 전환</h3>\n<p>Vue 2는 일반 ES로 구현되었다. 프로토타이핑 단계 직후, 우리는 타입 시스템이 이 정도 규모의 프로젝트에 큰 도움이 될 것임을 깨달았다. 타입 체크는 리팩토링 중에 예기치 않은 버그가 발생할 가능성을 크게 줄여주고, contributor들이 확신을 갖고 코드에 기여할 수 있게 해준다. 우리는 ES에 추가될 가능성을 보고 Facebook의 <a href=\"https://flow.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flow</a>를 채택했었다. Flow는 어느 정도 도움이 되었지만 우리가 원하는 수준만큼은 아니었는데, 특히 잦은 변화로 인해 계속 대응하며 업그레이드하는 것이 어려웠다. IDE에 대한 지원도 TypeScript와 비교하면 만족스럽지 않았다.</p>\n<p>또한 Vue와 TypeScript를 함께 사용하는 사용자가 점점 증가하는 것을 알게 되었다. 이러한 케이스를 지원하기 위해서는 Flow로 구현된 코드와 별도로 TypeScript 선언을 작성하고 유지해야만 했다. TypeScript로 전환하면 이러한 고민이 필요없으므로 유지관리 부담을 줄일 수 있다.</p>\n<h3 id=\"내부-모듈들의-decoupling\"><a href=\"#%EB%82%B4%EB%B6%80-%EB%AA%A8%EB%93%88%EB%93%A4%EC%9D%98-decoupling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>내부 모듈들의 Decoupling</h3>\n<p>우리는 프레임워크가 각각의 개별 API, 타입 정의, 테스트 등이 내부 패키지로 구성되는 monorepo 설정을 채택했다. 각 모듈들 간의 의존성이 명확해져 개발자들이 더 이해하기 쉽게 만들고자 했다. 이러한 구성의 핵심은 프로젝트의 contribution 장벽을 낮춰 장기적인 유지보수성을 향상시키고자 함이다.</p>\n<h3 id=\"rfc-프로세스-설정\"><a href=\"#rfc-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RFC 프로세스 설정</h3>\n<p>2018년 말에 새로운 반응형 시스템과 가상 DOM 렌더러로 작동하는 프로토타입을 가지게 되었다. 우리는 우리가 원했던 내부 아키텍처 개선을 검증했지만 사용자 API 변경에 대한 대략적인 초안만 작성되어 있었고, 이를 구체적인 설계로 바꿀 때였다.</p>\n<p>우리는 이것을 일찍, 신중하게 해야 한다는 것을 알고 있었다. Vue가 널리 사용되고 있다는 것은 곧 이러한 큰 변화가 사용자의 막대한 마이그레이션 비용을 유발하고 잠재적인 생태계 파편화로 이어질 수 있음을 의미하기 때문이다. 하여 변경사항에 대한 피드백을 사용자로부터 받을 수 있도록 2019년 초에 <a href=\"https://github.com/vuejs/rfcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC</a> 프로세스를 적용했다. 각 RFC는 템플릿을 따르며 이는 동기, 설계 세부사항, 장단점, 채택 전략에 중점을 둔 섹션으로 구성되어 있다. GitHub 레포에서 PR을 통해 프로세스가 진행되기 때문에 유기적으로 논의가 진행된다.</p>\n<p>우리가 잠재적 변화의 모든 측면을 충분히 고려할 수 있게끔 하고, 커뮤니티가 설계 프로세스에 참여하도록 하여 충분히 검토된 기능을 요청하게 한다는 점에서 RFC 프로세스는 사고방식의 도구로써 매우 유용하다는 것이 입증되었다.</p>\n<hr>\n<h1 id=\"더-빠르게-더-작게\"><a href=\"#%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%8D%94-%EC%9E%91%EA%B2%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>더 빠르게, 더 작게</h1>\n<p>성능은 프론트엔드 프레임워크에 필수적이다. Vue 2는 경쟁력있는 성능을 자랑하지만, 재구현을 통해 새로운 렌더링 전략을 실험함으로써 훨씬 더 발전할 수 있는 여지를 갖게 되었다.</p>\n<h3 id=\"가상-dom의-병목-현상-극복\"><a href=\"#%EA%B0%80%EC%83%81-dom%EC%9D%98-%EB%B3%91%EB%AA%A9-%ED%98%84%EC%83%81-%EA%B7%B9%EB%B3%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>가상 DOM의 병목 현상 극복</h3>\n<p>Vue는 매우 독특한 렌더링 전략을 갖고 있다. HTML과 비슷한 템플릿을 제공하고, 이는 가상 DOM 트리를 반환하는 렌더 함수를 통해 컴파일된다. Vue는 두 개의 가상 DOM 트리를 재귀적으로 탐색하여 모든 노드의 모든 속성을 비교 후 실제 DOM의 어느 부분을 업데이트할 지 파악한다. 이러한 brute-force 식 알고리즘은 최신 JavaScript 엔진에서 수행하는 최적화 덕분에 대체로 매우 빠르지만, 여전히 불필요한 CPU 작업을 많이 필요로 한다. 특히 거대한 정적 컨텐츠 내부에 약간의 동적 바인딩이 포함되어 있는 템플릿의 경우 위와 같이 가상 DOM 트리 전체를 훑는 것은 매우 비효율적이다.</p>\n<p>다행스럽게도 템플릿 컴파일 단계에서 템플릿에 대한 정적 분석을 수행하여 동적인 부분에 대한 정보를 추출할 수 있다. Vue 2에서는 정적 서브트리를 건너 뛰는 방식으로 어느 정도까지는 이를 수행했지만 컴파일러 아키텍처가 지나치게 단순한 관계로 이 이상의 최적화를 구현하기 어려웠다. Vue 3에서는 적절한 <a href=\"%5Bhttps://en.wikipedia.org/wiki/Abstract_syntax_tree%5D(https://en.wikipedia.org/wiki/Abstract_syntax_tree)\">AST</a> 변환을 사용해 컴파일러를 재구현했고, 이를 통해 플러그인 형식으로 컴파일 타임 최적화를 구현할 수 있다.</p>\n<p>또한 새로운 아키텍처로 구성하게 된김에 우리는 가능한 많은 오버헤드를 제거하는 렌더링 전략을 찾고 싶었다. 한 가지 옵션은 가상 DOM을 버리고 명령형 DOM 작업을 직접 생성하는 것이었는데, 이렇게 하면 가상 DOM 렌더링 기능을 직접 작성할 수 있는 기능이 제거될 것이고, 이는 고급 사용자 및 라이브러리 제작자에게 매우 유용한 기능을 없애버리는 꼴이었다. Vue와 그 생태계의 거대한 변화까지 불러오는 것은 덤이다.</p>\n<p>다음으로 생각한 것은 DOM 업데이트 시 가장 많은 오버헤드를 유발하는 불필요한 가상 DOM 트리 탐색과 속성 비교를 제거하는 것이었다. 이를 위해서는 컴파일러와 런타임이 유기적으로 동작해야 하는데, 컴파일러가 템플릿을 분석하고 최적화 힌트와 함께 코드를 생성하면 런타임은 힌트를 보고 가능한 빠른 경로를 택해야 한다. 이 과정은 다음 세 가지의 주요 최적화 과정을 통해 이루어진다.</p>\n<ul>\n<li>첫째로, 우리는 트리 레벨에서 노드 구조를 동적으로 변경하는 directive(v-if, v-for 등)가 없는 경우, 노드 구조가 완전히 정적으로 유지된다는 것을 알게되었다. 템플릿을 이러한 directive로 구분하여 중첩된 블록으로 나누면 각 블록 내의 노드 구조는 완전히 정적으로 된다. 때문에 블록 내의 노드를 업데이트할 때 더이상 트리를 재귀적으로 탐색할 필요가 없으며, 블록 내의 동적 바인딩은 flat array로 추적할 수 있게 되었다. 이러한 최적화는 트리 탐색의 양을 크게 줄여 주어 대부분의 가상 DOM 오버헤드를 피할 수 있다.</li>\n<li>두번째로, 컴파일러는 정적 노드, 서브트리, 데이터 객체 등을 적극적으로 감지하여 렌더 함수 바깥으로 hoist 한다. 이렇게 하면 각 렌더링마다 객체들을 다시 생성하지 않아도 되므로 메모리 효율을 크게 높일 수 있고, 가비지 콜렉션의 빈도가 줄어들게 된다.</li>\n<li>마지막으로, DOM element 레벨에서 컴파일러는 수행해야 하는 업데이트 유형에 따라 동적 바인딩이 있는 각 element에 대한 최적화 플래그를 생성한다. 예를 들어 동적 클래스 바인딩과 여러 개의 정적 속성을 가진 element는 클래스 검사만 필요하다는 플래그를 받는 식이다. 런타임은 이러한 힌트를 보고 더 빠른 업데이트 경로를 판단하게 된다.</li>\n</ul>\n<p>벤치마크 시 Vue 3의 CPU Time<em>(브라우저의 DOM 조작을 제외한 JavaScript 연산에 소요된 시간)</em>은 Vue 2의 1/10도 안 걸릴 때가 종종 있을만큼 이러한 기술들을 통해 렌더 성능이 크게 개선되었음을 확인했다.</p>\n<h3 id=\"번들-크기-최소화\"><a href=\"#%EB%B2%88%EB%93%A4-%ED%81%AC%EA%B8%B0-%EC%B5%9C%EC%86%8C%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>번들 크기 최소화</h3>\n<p>프레임워크의 사이즈도 성능에 영향을 미친다. 이는 웹 애플리케이션에 국한된 문제인데, 브라우저가 필요한 asset들을 전부 다운로드 받고 JavaScript를 파싱할 때까지 애플리케이션이 반응하지 않기 때문이다. 특히 SPA의 경우 이러한 경향이 더욱 두드러진다. Vue는 Vue 2의 gzip으로 압축된 런타임 크기가 23KB일만큼 상대적으로 경량화된 크기라고 볼 수 있지만, 우리는 다음과 같은 문제들을 발견했다.</p>\n<ul>\n<li>첫째로, 모든 사용자가 Vue의 모든 기능들을 사용하는 것은 아니다. 예를 들어 transition 기능을 사용하지 않는 애플리케이션도 의도와 상관없이 무조건 transition 관련 코드의 다운로드와 파싱을 수행해야 한다.</li>\n<li>두번째는 우리가 기능을 추가할 때마다 프레임워크의 크기 역시 계속 커진다는 것이다. 우리가 새로운 기능을 추가하려 할 때마다 번들 크기를 고려하지 않을 수 없고, 결과적으로 대다수의 사용자가 사용할만한 기능만 포함하게 되는 경향이 있다.</li>\n</ul>\n<p>결국 <a href=\"https://en.wikipedia.org/wiki/Tree_shaking\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree-shaking</a>이라고 부르는 사용하지 않는 코드를 빌드 타임에 제거할 수 있는 기능을 지원해야 하며, 사용자가 포함한 기능만 번들에 포함되어야 한다. 이렇게 되면 우리가 유용하다고 생각하는 기능들도 부담없이 추가하여 제공할 수 있게 된다.</p>\n<p>Vue 3에서는 대부분의 전역 API와 내부 헬퍼들을 ES 모듈로 변경하여 번들러가 사용하지 않는 모듈과 관련된 종속성 및 코드들을 제거할 수 있도록 지원한다. 템플릿 컴파일러도 실제로 템플릿에서 사용되는 기능만 import 한 다음 코드를 생성하여 번들러가 tree-shaking을 할 수 있도록 구현했다.</p>\n<p>하지만 일부는 Vue를 사용하는 모든 유형의 애플리케이션에 필수적이기 때문에 tree-shaking을 지원할 수 없다. 우리는 이런 필수불가결한 부분의 크기를 baseline size라고 부르는데, Vue 3의 baseline size는 수많은 기능이 추가되었음에도 Vue 2의 절반보다도 작은 10KB 정도이다.</p>\n<hr>\n<h1 id=\"대규모-애플리케이션-지원에-대한-필요성\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%A7%80%EC%9B%90%EC%97%90-%EB%8C%80%ED%95%9C-%ED%95%84%EC%9A%94%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대규모 애플리케이션 지원에 대한 필요성</h1>\n<p>우리는 Vue가 대규모 애플리케이션을 다루기 위해 더 개선되길 원했다. 우리가 처음 Vue를 설계할 때는 진입장벽을 낮추고 더 배우기 쉽게 하는데 초점을 맞췄었다. 하지만 Vue가 점점 널리 쓰이면서 수백 개의 모듈을 포함하고, 수십명의 개발자가 관리하는 프로젝트의 요구사항들을 알게 되었다. 이정도 규모의 프로젝트는 TypeScript와 같은 타입 시스템과 재사용 가능한 코드를 깔끔하게 관리하는 기능이 중요하며 이러한 측면에서 Vue는 썩 좋지는 않았다.</p>\n<p>Vue 3 설계 초기 단계에는 클래스를 사용한 컴포넌트 구현을 빌트인으로 지원하여 Vue에서의 TypeScript 사용성을 개선하려고 시도했다. 문제는 이를 구현하기 위해 필요한 클래스 필드나 데코레이터 등이 여전히 proposal 상태라 JavaScript에 공식적으로 포함되기 전에 어떻게 변할지 장담할 수 없다는 것이었다. 클래스 API의 추가는 다소 개선된 TypeScript와의 통합 지원 외의 어떠한 것도 제공하지 않았기 때문에, 이러한 불확실성과 구현의 복잡도를 고려하면 과연 이 방법이 맞는 것인지 의문을 가질 수 밖에 없었다.</p>\n<p>결국 우리는 다른 방법을 찾기로 결정했다. React의 <a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hooks</a>에서 영감을 받아 하위 레벨의 반응성과 컴포넌트의 lifecycle API를 밖으로 드러내어 좀 더 자유롭게 컴포넌트 구현이 가능하도록 <a href=\"https://vue-composition-api-rfc.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composition API</a>라 부르는 방법을 생각해냈다. 이는 길게 option API를 나열하여 컴포넌트를 정의하는 대신, 사용자가 마치 함수를 작성하듯이 자유롭게 상태 기반 로직을 작성하고 재사용할 수 있으며, 우수한 TypeScript 지원을 제공한다.</p>\n<p>우리는 이 아이디어에 매우 흥분했다. 비록 composition API는 특정 문제를 해결하기 위해 설계되었지만 기술적으로는 컴포넌트를 구현할 때 사용될 수 있다. 너무 고취한 나머지 proposal의 첫번째 초안에서 조금 이른감은 있지만 향후 릴리즈에서 기존 option API를 composition API로 바꿀 수 있다고 암시했다. 이는 커뮤니티의 엄청난 반발을 불러왔고, 이로부터 장기적인 계획과 의도를 명확하게 전달하고 사용자의 요구사항을 충분히 이해해야 한다는 귀중한 교훈을 얻었다. 커뮤니티로부터 피드백을 받은 후, proposal을 완전히 재작성하여 composition API가 option API에 부가적이고 보완적인 기능이라는 점을 분명히 했다. 수정된 proposal의 반응은 훨씬 긍정적이어서 많은 건설적인 제안을 받았다.</p>\n<hr>\n<h1 id=\"균형-추구\"><a href=\"#%EA%B7%A0%ED%98%95-%EC%B6%94%EA%B5%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>균형 추구</h1>\n<p>백만명이 넘는 Vue 개발자 중에는 HTML/CSS에 대한 기초 지식만 있는 초보자들, jQuery에서 넘어온 전문가들, 다른 프레임워크에서 마이그레이션을 한 베테랑들, 프론트엔드 솔루션을 찾는 백엔드 엔지니어들, 대규모로 소프트웨어를 다루는 아키텍트 등 다양한 사용자들이 있다. 이러한 만큼 그에 맞는 다양한 사용 사례에 대한 대응이 필요하다. 어떤 개발자는 기존 애플리케이션에 간단한 상호작용 정도만 보수적으로 도입하고자 하는 반면, 다른 개발자는 유지보수 걱정이 덜한 일회성 프로젝트에서 다양한 기능들을 실험해볼 수도 있다. 아키텍트는 수년동안 대규모 프로젝트와 개발팀을 이끌어야 할 것이다.</p>\n<p>Vue의 구조는 이런 다양한 trade-offs 사이에서 균형을 유지하기 위해 지속적으로 다듬어지고 있다. Vue의 슬로건인 <strong>'The progressive framework'</strong>는 이러한 과정에서 비롯되는 계층화된 API 디자인을 캡슐화함을 뜻한다. 덕분에 초보자는 CDN, HTML 기반 템플릿, 직관적인 option API 등을 통해 원활하게 학습할 수 있고, 전문가는 완전한 기능을 갖춘 CLI, 렌더 함수, compsition API 등을 통해 그들에 맞는 다양한 사례를 처리할 수 있다.</p>\n<p>이러한 우리의 비전을 Vue 3에서 실현하기 위해 해야할 일이 아직도 많이 남아있다. 가장 중요한 것은 원활한 마이그레이션을 위해 지원 라이브러리, 문서 및 도구들을 업데이트하는 것이다. 이를 위해 향후 몇 개월동안 열심히 일할 것이며, Vue 3를 통해 사용자들이 어떤 것들을 만들어낼지 무척이나 기대된다.</p>\n"}},{"node":{"title":"[Vue.js] computed vs watch - computed와 watch의 차이점","path":"/vue-computed-vs-watch/","date":"17. February 2020","timeToRead":3,"description":"Vue.js에서 데이터 변경에 반응하여 후속 동작을 취해야 할 때 computed와 watch 속성을 흔히 사용한다. 언뜻 비슷해 보이는 두 속성의 차이점은 무엇인지, 상황 별로 어느 것을 사용해야 적합한지 알아본다.","content":"<p>Vue.js를 처음 학습할 때 가장 헷갈렸던 것중 하나가 computed와 watch를 선택해서 사용해야 하는 상황이었다. 언뜻 보면 비슷한 동작을 하는 것 같은데 차이가 있을테니 두 개가 있을 것이고, 이름도 뭔가 계산된거 같은 이름과 지켜보는 듯한 이름으로 차이가 있다. 공식 문서에 두 속성에 대한 개념과 차이점이 잘 정리되어 있지만 되새기는 차원에서 글을 작성해 본다.</p>\n<hr>\n<h1 id=\"computed\"><a href=\"#computed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>computed</h1>\n<p>computed는 데이터의 변경에 반응하여 특정 값을 반환해주는 일종의 <strong>getter 함수</strong>이다. 아래는 공식 문서의 예제 코드이다.</p>\n<div class=\"gist-embed\">\n    <div id=\"gist101580685\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-vue-computed-example-vue\" class=\"file my-2\">\n    \n    <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-vue  \">\n\n        \n<div class=\"js-check-bidi js-blob-code-container blob-code-content\">\n\n  <template class=\"js-file-alert-template\">\n  <div data-view-component=\"true\" class=\"flash flash-warn flash-full d-flex flex-items-center\">\n  <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n  \n    <span>\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      <a href=\"https://github.co/hiddenchars\" target=\"_blank\">Learn more about bidirectional Unicode characters</a>\n    </span>\n\n\n  <div data-view-component=\"true\" class=\"flash-action\">        <a href=\"{{ revealButtonHref }}\" data-view-component=\"true\" class=\"btn-sm btn\">    Show hidden characters\n</a>\n</div>\n</div></template>\n<template class=\"js-line-alert-template\">\n  <span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"line-alert tooltipped tooltipped-e\">\n    <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n</span></template>\n\n  <table data-hpc class=\"highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file\" data-tab-size=\"8\" data-paste-markdown-skip data-tagsearch-lang=\"Vue\" data-tagsearch-path=\"vue-computed-example.vue\">\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L1\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"1\"></td>\n          <td id=\"file-vue-computed-example-vue-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">template</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L2\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"2\"></td>\n          <td id=\"file-vue-computed-example-vue-LC2\" class=\"blob-code blob-code-inner js-file-line\">  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>example<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L3\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"3\"></td>\n          <td id=\"file-vue-computed-example-vue-LC3\" class=\"blob-code blob-code-inner js-file-line\">    &lt;<span class=\"pl-ent\">p</span>&gt;원본 메시지: &quot;{{ message }}&quot;&lt;/<span class=\"pl-ent\">p</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L4\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"4\"></td>\n          <td id=\"file-vue-computed-example-vue-LC4\" class=\"blob-code blob-code-inner js-file-line\">    &lt;<span class=\"pl-ent\">p</span>&gt;역순으로 표시한 메시지: &quot;{{ reversedMessage }}&quot;&lt;/<span class=\"pl-ent\">p</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L5\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"5\"></td>\n          <td id=\"file-vue-computed-example-vue-LC5\" class=\"blob-code blob-code-inner js-file-line\">  &lt;/<span class=\"pl-ent\">div</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L6\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"6\"></td>\n          <td id=\"file-vue-computed-example-vue-LC6\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">template</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L7\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"7\"></td>\n          <td id=\"file-vue-computed-example-vue-LC7\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L8\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"8\"></td>\n          <td id=\"file-vue-computed-example-vue-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L9\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"9\"></td>\n          <td id=\"file-vue-computed-example-vue-LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\"><span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L10\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"10\"></td>\n          <td id=\"file-vue-computed-example-vue-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>vue-computed-example<span class=\"pl-pds\">&#39;</span></span>,</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L11\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"11\"></td>\n          <td id=\"file-vue-computed-example-vue-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  <span class=\"pl-en\">data</span>(){</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L12\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"12\"></td>\n          <td id=\"file-vue-computed-example-vue-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    <span class=\"pl-k\">return</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L13\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"13\"></td>\n          <td id=\"file-vue-computed-example-vue-LC13\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>안녕하세요<span class=\"pl-pds\">&#39;</span></span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L14\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"14\"></td>\n          <td id=\"file-vue-computed-example-vue-LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L15\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"15\"></td>\n          <td id=\"file-vue-computed-example-vue-LC15\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  },</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L16\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"16\"></td>\n          <td id=\"file-vue-computed-example-vue-LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  computed<span class=\"pl-k\">:</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L17\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"17\"></td>\n          <td id=\"file-vue-computed-example-vue-LC17\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 계산된 getter</span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L18\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"18\"></td>\n          <td id=\"file-vue-computed-example-vue-LC18\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    <span class=\"pl-en\">reversedMessage</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L19\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"19\"></td>\n          <td id=\"file-vue-computed-example-vue-LC19\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">message</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span><span class=\"pl-pds\">&#39;</span></span>).<span class=\"pl-c1\">reverse</span>().<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span><span class=\"pl-pds\">&#39;</span></span>)</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L20\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"20\"></td>\n          <td id=\"file-vue-computed-example-vue-LC20\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L21\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"21\"></td>\n          <td id=\"file-vue-computed-example-vue-LC21\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L22\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"22\"></td>\n          <td id=\"file-vue-computed-example-vue-LC22\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">}</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-computed-example-vue-L23\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"23\"></td>\n          <td id=\"file-vue-computed-example-vue-LC23\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></td>\n        </tr>\n  </table>\n</div>\n\n\n    </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/perade/cc8d98bddb8e4f96ba3878ce9d347b5f/raw/0945d48faf45be7b1b573f863222f948135fb266/vue-computed-example.vue\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/perade/cc8d98bddb8e4f96ba3878ce9d347b5f#file-vue-computed-example-vue\">\n          vue-computed-example.vue\n        </a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div>\n</div>\n<p>예제를 실행해보면 <code>message</code>의 값에 따라 <code>reversedMessage</code>가 반환하는 값이 변경됨을 알 수 있다. <code>reversedMessage</code>라는 <strong>getter 함수</strong>가 <code>message</code>에 의존성을 가지고 있기 때문인데, 이것이 바로 computed 속성의 특징이다.</p>\n<p>또한 computed의 장점중 하나는 의존성을 가진 데이터가 변경되지 않으면 getter 호출 시 내부 로직 연산을 다시 하지 않고, 이미 계산되어 있는 결과를 즉시 반환한다는 점이다. 이는 <a href=\"https://kr.vuejs.org/v2/guide/reactivity.html#%EB%B3%80%EA%B2%BD-%EB%82%B4%EC%9A%A9%EC%9D%84-%EC%B6%94%EC%A0%81%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue가 데이터를 추적하기 위해 사용하는 방식</a> 덕분인데, 연산이 부담스러운 데이터 같은 경우 이러한 특성을 잘 활용하면 불필요한 연산을 줄일 수 있다. 매번 연산이 필요할 경우엔 method를 활용하면 된다.</p>\n<hr>\n<h1 id=\"watch\"><a href=\"#watch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>watch</h1>\n<p>watch는 computed와 비슷하지만 <strong>특정 데이터가 변경되었을 때 지정한 Callback 함수를 실행</strong>하는, 즉 사용 목적이 다른 속성이다. 아래는 공식 문서의 예제 코드를 일관성을 위해 <code>message</code>를 활용한 예제로 변경한 것이다.</p>\n<div class=\"gist-embed\">\n    <div id=\"gist101581234\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-vue-watch-example-vue\" class=\"file my-2\">\n    \n    <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-vue  \">\n\n        \n<div class=\"js-check-bidi js-blob-code-container blob-code-content\">\n\n  <template class=\"js-file-alert-template\">\n  <div data-view-component=\"true\" class=\"flash flash-warn flash-full d-flex flex-items-center\">\n  <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n  \n    <span>\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      <a href=\"https://github.co/hiddenchars\" target=\"_blank\">Learn more about bidirectional Unicode characters</a>\n    </span>\n\n\n  <div data-view-component=\"true\" class=\"flash-action\">        <a href=\"{{ revealButtonHref }}\" data-view-component=\"true\" class=\"btn-sm btn\">    Show hidden characters\n</a>\n</div>\n</div></template>\n<template class=\"js-line-alert-template\">\n  <span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"line-alert tooltipped tooltipped-e\">\n    <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n</span></template>\n\n  <table data-hpc class=\"highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file\" data-tab-size=\"8\" data-paste-markdown-skip data-tagsearch-lang=\"Vue\" data-tagsearch-path=\"vue-watch-example.vue\">\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L1\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"1\"></td>\n          <td id=\"file-vue-watch-example-vue-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">template</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L2\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"2\"></td>\n          <td id=\"file-vue-watch-example-vue-LC2\" class=\"blob-code blob-code-inner js-file-line\">  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>example<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L3\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"3\"></td>\n          <td id=\"file-vue-watch-example-vue-LC3\" class=\"blob-code blob-code-inner js-file-line\">    &lt;<span class=\"pl-ent\">p</span>&gt;원본 메시지: &quot;{{ message }}&quot;&lt;/<span class=\"pl-ent\">p</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L4\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"4\"></td>\n          <td id=\"file-vue-watch-example-vue-LC4\" class=\"blob-code blob-code-inner js-file-line\">    &lt;<span class=\"pl-ent\">p</span>&gt;역순으로 표시한 메시지: &quot;{{ reversedMessage }}&quot;&lt;/<span class=\"pl-ent\">p</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L5\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"5\"></td>\n          <td id=\"file-vue-watch-example-vue-LC5\" class=\"blob-code blob-code-inner js-file-line\">  &lt;/<span class=\"pl-ent\">div</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L6\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"6\"></td>\n          <td id=\"file-vue-watch-example-vue-LC6\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">template</span>&gt;</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L7\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"7\"></td>\n          <td id=\"file-vue-watch-example-vue-LC7\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L8\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"8\"></td>\n          <td id=\"file-vue-watch-example-vue-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L9\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"9\"></td>\n          <td id=\"file-vue-watch-example-vue-LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\"><span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L10\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"10\"></td>\n          <td id=\"file-vue-watch-example-vue-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>vue-watch-example<span class=\"pl-pds\">&#39;</span></span>,</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L11\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"11\"></td>\n          <td id=\"file-vue-watch-example-vue-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  <span class=\"pl-en\">data</span>(){</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L12\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"12\"></td>\n          <td id=\"file-vue-watch-example-vue-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    <span class=\"pl-k\">return</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L13\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"13\"></td>\n          <td id=\"file-vue-watch-example-vue-LC13\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>안녕하세요<span class=\"pl-pds\">&#39;</span></span>,</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L14\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"14\"></td>\n          <td id=\"file-vue-watch-example-vue-LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      reversedMessage<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span><span class=\"pl-pds\">&#39;</span></span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L15\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"15\"></td>\n          <td id=\"file-vue-watch-example-vue-LC15\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L16\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"16\"></td>\n          <td id=\"file-vue-watch-example-vue-LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  },</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L17\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"17\"></td>\n          <td id=\"file-vue-watch-example-vue-LC17\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  watch<span class=\"pl-k\">:</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L18\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"18\"></td>\n          <td id=\"file-vue-watch-example-vue-LC18\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Callback으로 지정된 handler 함수를 실행</span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L19\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"19\"></td>\n          <td id=\"file-vue-watch-example-vue-LC19\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    message<span class=\"pl-k\">:</span> {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L20\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"20\"></td>\n          <td id=\"file-vue-watch-example-vue-LC20\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      <span class=\"pl-en\">handler</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">newVal</span>, <span class=\"pl-smi\">oldVal</span>) {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L21\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"21\"></td>\n          <td id=\"file-vue-watch-example-vue-LC21\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">        <span class=\"pl-k\">if</span> (newVal <span class=\"pl-k\">&amp;&amp;</span> newVal <span class=\"pl-k\">!==</span> oldVal) {</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L22\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"22\"></td>\n          <td id=\"file-vue-watch-example-vue-LC22\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">          <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">reversedMessage</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">newVal</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span><span class=\"pl-pds\">&#39;</span></span>).<span class=\"pl-c1\">reverse</span>().<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span><span class=\"pl-pds\">&#39;</span></span>)</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L23\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"23\"></td>\n          <td id=\"file-vue-watch-example-vue-LC23\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">        }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L24\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"24\"></td>\n          <td id=\"file-vue-watch-example-vue-LC24\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      },</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L25\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"25\"></td>\n          <td id=\"file-vue-watch-example-vue-LC25\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      immediate<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L26\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"26\"></td>\n          <td id=\"file-vue-watch-example-vue-LC26\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">      deep<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L27\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"27\"></td>\n          <td id=\"file-vue-watch-example-vue-LC27\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">    }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L28\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"28\"></td>\n          <td id=\"file-vue-watch-example-vue-LC28\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">  }</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L29\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"29\"></td>\n          <td id=\"file-vue-watch-example-vue-LC29\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">}</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-vue-watch-example-vue-L30\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"30\"></td>\n          <td id=\"file-vue-watch-example-vue-LC30\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></td>\n        </tr>\n  </table>\n</div>\n\n\n    </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/perade/85b643e0153ae5bba53ddd9d27cc6e32/raw/eeae1f24c51362147998fee5fecb1253e69db597/vue-watch-example.vue\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/perade/85b643e0153ae5bba53ddd9d27cc6e32#file-vue-watch-example-vue\">\n          vue-watch-example.vue\n        </a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div>\n</div>\n<p>예제를 보면 결과는 computed를 사용했을 때와 동일하지만 코드가 길어지고(습관적으로 watch를 풀어서 사용한 탓도 있다.) 복잡도가 더 올라갔다. 하지만 computed 사용이 더 적합한 예제를 다뤄서 그렇지, 특정 데이터가 변경되었을 때 API 호출 등 특정 동작을 실행해야하는 상황은 watch가 더 적합하다고 Vue에서는 언급하고 있다. 물론 대부분의 경우 computed가 더 적합하다는 말도 함께 언급하고 있지만 말이다.</p>\n<hr>\n<h1 id=\"정리\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>정리</h1>\n<p>간단하게 computed와 watch 속성의 차이점에 대해 알아보았다. 둘 다 데이터 변경에 반응하는 특징을 갖고 있지만, 사용 목적이 다름을 인지하고 상황에 맞게 사용하려는 노력이 필요하다. 정리하자면 데이터 변경 시 특정 동작을 취해야 하는 상황은 watch, 그 외 상황은 대체로 computed가 적합하다고 할 수 있다.</p>\n<hr>\n<h3 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h3>\n<ul>\n<li><a href=\"https://kr.vuejs.org/v2/guide/computed.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kr.vuejs.org/v2/guide/computed.html</a></li>\n<li><a href=\"https://medium.com/@jeongwooahn/vue-js-watch%EC%99%80-computed-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%99%80-%EC%82%AC%EC%9A%A9%EB%B2%95-e2edce37ec34\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@jeongwooahn/vue-js-watch%EC%99%80-computed-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%99%80-%EC%82%AC%EC%9A%A9%EB%B2%95-e2edce37ec34</a></li>\n</ul>\n"}},{"node":{"title":"Gridsome으로 블로그 개설하기 - 본격적인 블로그 만들기","path":"/make-blog-with-gridsome-2nd/","date":"12. January 2020","timeToRead":4,"description":"Gridsome 이라는 Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)와 gh-pages를 활용하여 블로그를 개설하는 방법을 다룬다. 두 번째 포스팅은 예제를 통해 실제로 블로그를 구축해 보면서 어떻게 블로그를 개설할 수 있는지 자세히 살펴본다.","content":"<ol>\n<li><a href=\"https://perade.github.io/blog/make-blog-with-gridsome-1st\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome으로 블로그 개설하기 - 시작하기에 앞서</a></li>\n<li><a href=\"https://perade.github.io/blog/make-blog-with-gridsome-2nd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome으로 블로그 개설하기 - 본격적인 블로그 만들기</a></li>\n</ol>\n<hr>\n<h1 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>개요</h1>\n<p>이전 포스팅에서 <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a>에 대해 간략하게 살펴보았다. 이번 글에서는 실제로 Gridsome과 <a href=\"https://github.com/tschaub/gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gh-pages</a>를 활용하여 어떻게 블로그를 개설하는지 예제를 통해 설명하고자 한다.</p>\n<hr>\n<h1 id=\"gridsome-설치\"><a href=\"#gridsome-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome 설치</h1>\n<p>Gridsome을 사용하려면 8.3버전 이상의 Node.js가 설치되어 있어야 한다. 만약 Node.js가 설치되어 있지 않다면 <a href=\"https://nodejs.org/ko/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기</a>를 참고하여 Node.js부터 설치하도록 한다.</p>\n<p>Node.js가 설치되었다면 터미널에서 아래 명령어를 통해 Gridsome을 설치한다.</p>\n<pre><code>// NPM을 사용할 경우\nnpm install --global @gridsome/cli\n\n// YARN을 사용할 경우\nyarn global add  @gridsome/cli\n</code></pre>\n<p>현재 시점(20.01.12) 기준 0.7.12 버전이 설치된다. 이제 Gridsome을 사용할 준비가 끝났다.</p>\n<hr>\n<h1 id=\"블로그-프로젝트-만들기\"><a href=\"#%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>블로그 프로젝트 만들기</h1>\n<p>직접 <code>gridsome create my-blog</code> 와 같은 명령어를 통해 0에서부터 시작하는 방법도 있지만, 아래와 같이 Gridsome에서 제공하는 스타터를 통해 쉽게 시작할 수도 있다. 본 글에서는 Gridsome에서 공식 제공하는 <a href=\"https://github.com/gridsome/gridsome-starter-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome Blog Starter</a>를 활용해 블로그를 개설해보도록 하겠다. 최소한의 플러그인만 붙어 있어 나중에 커스터마이징 하기가 용이하기 때문이다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1269 917' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1069c2073eb5164a15c55d76b1242bc2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1069c2073eb5164a15c55d76b1242bc2)' width='1269' height='917' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAuCAYAAACYlx/0AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAPFklEQVRo3s1aaYwcxRXeP5GAYGNjCJgEhG1844PL4AMbbHNGFoEfCQGkSJFyB8wfEgflQCDAIHGIEAghYCcEgxHIt4m4bDCs13vvsrve9V5zz85939Pz5b2arnZNT/fYRg6ipTdVPV3VVfXq1Xvfe6%2bbkoUcemI%2buDweeNxuOF0uBAIBTExMIJPJgK9EIoFMluqVCsLZFALpBKLZNEqahmw2i2QyKdpq%2bn08Hke5XBZ9K9THTHyV6Hk0FiOKIqJTOBpBNB5DjIjvk6kU0jRuOmNHafE8FAkjlU5V31sqIUbv5fGdTqeY08DAAHK5HNy0Pp4bz5XXlKL3NyXzWWwbaEHX0ACO9g%2bgtbUVnZ2daG9vF0zgKxqNIhgKoVLWxOKPhrw4FvEjUyygkM/D5/PB7/ejWCwaA6XTaYMB6qUygCfu9fsQCAURDIdE3R%2bYEPe%2bCb9gRooW2YiYCdw3nkyI9/IcgsEgCoUC%2bvr6xHj9/f1iY3he/Iw3jBcvGCAmVDvHmos5aNSpbZnuuY%2bs1ywOx18l2tBzTW9bU9f7clnR3yvrFaNebcOMKjcgfm68X5%2bbymhN3tusr8lqh6xephJPTDJCbW9HFZUJFs/s6KQvm3kaYzcYRzAgT2LMostUpDNkcNBGfDVlgqc0Udv5V2z1xanQyTCoTgJYjFhJ9H35JQborLhd7rrG5kE0032EzuBHH3%2bM8fExNB9uIT3SBhe9Z3BoCIODg4iTUmpubsZnhz6Hw%2bFAb3cP/T8Ex/g44onEaVn8VyUhAYVyCZkSKTStjCwptqLWWIObGRAj7b19%2bztoa2vF7j37sGvXLuzZu4/qe7F7104MESMOH27GO%2b%2b%2bh/379qG15Qh27NiJQ58exOi4w9A1VmOd8nE4xauJFz8SmUBfkHYs5EOHbxzuRKSheJ/uI3Cio/H/vJpstb%2bisVWqKKWcIJucSCQibKzADGRn2cQkyTRF6f9EPFG126mkaJdMpkQ7bs/mMkVmyainqs9YH30tEsAvZ9vJyo8H5cXwfaNzY2YA21gXgQ4nnW83ASrGBIwNAmTTHSTiLpeT7v3wet0YGR2Fl555uB2V3N5N4Iv1h4/6cfvxsTECM/GvhwGMnMZowJGREfT29qKnp0fUJZKDxeBf9xE43YpPfXdTIy5bKiRUahmgtDtVO38iHGG00WykwOZd5noj3dLEjVgCGCaOk1kaJRFlYhE2M4dFneGqmWEC2dlIggRNVmQgy5ORBh0%2b1/Q9SekTiFLpVycBrLT47LPYC32g6wAzA5hZfGSsjkCCFBmbO5fDBbeTmOkYx0QgaCnCNbCa6qw/RkZHSFdUzz/rg6FjQ7re8IgNSibTNQvii/0Axhrj1N/hdMDj4k10YGR4GH6vD6PUz6f7M3Iesm8NA0bpzLMHyIqJB2Pyer1isTUIkDpHyObXiJaO4VmBsqMRpEWHw%2bGq05FKNWSA9A/i5PTw%2bGECVOx4CYtCloAVIVuEaCQqNoU9PrYS0n/I06YFgyFidIDaUj8aN6xbozS1i0SrHiWdIYymi4RzeC4WDOBBswyDaRCGxSwN0r01Q%2bACASVVAiQDuF%2bGzBi7zTzprO5KN1JwZf2s81h8vKQJlIw3X%2bzessUw5kLzZNPJfbmf9EDrxipnEOzrQalIjhMqhu6oMoAqWz0utJG7G6ddY1PEA6nurCoBzFGzcpEY4VSxhJ0OqOhj1ZCUIP0INBxTPhclE%2b9Qwfi/TgLaiXv%2bXBY5WlyMxIcDCsxdMwMqutiZGcD1ku6aGtRA%2banepKYoqJJ0f0/QT45v9NH7NRwTx115EwM0eMMRRFJ5gdSi0Zg4wyGSCCsJYMVj5Xc3MqHfNKqTgLLjGIqkaGIkCRF98awX6hhA4pQlSVFtLV8pYhx7eXwWWXrsokHflKsGB/CPm2B3OFdEhkwZT541utC2Jm5xycrSzIBoNIz339%2bP1rY2fHLgE4yMjVfDU6TM6o4GU6laVpQo0Fch7SuQhQRU4KENi2TK5NaGyRR6DTN2MkdAM4XFTpfH18gHqP%2b7YqJTlABvxolYLoJctmoC2aTZQWFVCcrFO9xe3Hv/Jtzzm9/j3t9uEnTf/X8Q9JONDxt1bsPl3b/%2bHX656TEkUmkd4dmjRDvlmSlqOORME2Vw2FdCM9EhTwGfugv42JnFB44M9o1lsONYEtsHYtjSFRCUKpTqdcAO9x50BrsQ8AQIPY2KaLAdEkzSeTe0cLnKgI7eATRduBBNFyyolkznzRPlhp/%2bHGfMuAJN586p/j/9cjRNm4sp81bAFwzVBUPUYKydM8S7HM2W8K/uOLZ0RvH03i5s3tWBp/Z/iUd3tuORXd34485OPLS9GQ%2b%2b3YIHd/Ti/v0O/GLPKEKZookBVGopQn1FBj4VAwrbSUCxVDTOkoSV3f1DOGfeckyZu1ws7BwqL7piLRasuQNLb/8xFq27C9%2b7cp34f%2br8Ffj2rGW49NpbMBGKWDKApbC1vQO9ff2W%2bQVmQIwY8EZPDFs7I3h6dxueeK8ZT%2b1ux2M7WvH4uwfwp3dbsHFbKx54qxUP7hzEAx%2bG8NBHbkQzeRMDyqQDBlvQzzDWPyHwPDtFdhIQT8TrJKCrfxBnz74WZ1%2b2DJOoZLpwyY2Ys2oDZi2/HbNXbsD0pWsxec514tkZM67CxVffRAwIW%2b52oVAkXZMlhZyx2QxO0JTwYmuQKISXu%2bJ4iehvHVE8257EPzscONr7D7zZfAAvf96B5w924uUP9mLL1l/R/MP1R6BA9TydKU3GACz8cQO%2b6nF4VQJUBjDxDp8182pMnbcK0xauxrnzrxf/8TNmwhmXWjPgZNxy9Qhs6Q7RuQ5ja3eY6mG83hXCa50BvNQexnD/G0gOPI5o7%2bNwfvEQ9vznZ3jx9b%2bQtbPAAd29vRgeGSULUHWJ2Rkyi56cKKetyiYJ6GYG8OJowectWW/QtCXrMHXRDZg0fzUmLVhD5RpMufxGnDV7OTFgvSUDIB0resaU1xEpL1qdR1mrok%2bhxH0eEXUKRePwRwjVRpMIxsm3SGeEJBVKGvKk%2b1j9levMIGv2ko6XG0RjzNmeWh2gM4B2eu7aH2LxLfdgwfq7sfS2%2bzBnzZ248OrbBE2/5nacd8UtOGvOSksGyDKbzZEbG4CfKJfLC92kmluzL5CnY5KmPmlaZbbI6yHmaFaSpNU5eEICNveQ%2bXCmEPI6yQ8froHBdd5goWDLgEkkAZesuAOzrr8TM1b9ADMF3YnLVt%2bFmfTfxddtwPlX3oozZ6%2boY4BAlLRjUXaByTwy4MrS4nkHEwTKisWSAQI0xUzyFU5mMeyPwxkhT5SUnFZiRV4156pLr9nFA9zJEpLCWdaEAlLF30oaGknAdNrpi5iuuQ3Tlt6MKYvWGTR54VpMWbzeUgLEzgqUWDKOlh1%2bV709vpIE4V2OMUz4vHC7XSLDzTGFMGeN9ZgETHOuYQC6jqDgGofT5xfRGTsgxAM2lIC5KzFl4Q04Z8FqojWYTKSWTEIHXHad5RFQMYCMUFkGUwwG6NGoXAnOWB7eRBGlSuPgqiUDysTBMofF9NB4IytgqwNmEwPmLMfZc8jOk5JjmkT1ycQUSZPmEkaYvwpnzlxmawarSjAvMkZuguXSDKrzKJslgMAZxzCjUfJqadcTevqb/Rqz217HAFG%2b/zbyY0cx7vEhRHjARSLEQRGrpGihaAGEBoYIABHIufwGzFv3I6EA51M58/q7MHXxTaT4bhbHgYl1AEvEDBMQqgZdczT5FOmCtCir9Yy4LypRouMp9%2bq8kuTIuaMZeOM5xDKFU5MAURzrprdEkMpxljgrpMAqIlRR8/pmKHw%2bQd/pi3HBVbfiElJ23132faEPpi25iUwhmcPF60T9W7NWouk7iwQe8AVqoTCLPTOBd511gaSi0AvlmvR8jRIkxTnscMPlD4l3ivggufPSsz1hUPSTQT%2bGfVEkYhGEyBM0L74WCh%2bPCssd8PgDeHjzC/jzM6/g6VfexHOvvYVnXt2G519/G89SffPL/8YTL23FYy%2b8hkeeexWbnvwrHn3u74YzpJ59deFmJkiYLubAWEAVb61smDmR7ieSjFTDb5YM6Bj2wRtKIJ%2brD2jUSYCCBM2uZYpgcpIol82IjHGCdiKdjCHJ3%2bwoZ7nmYwwi8W2S0yV2X3VwG8X5K3qegtNw7Lq7vV4CcKN0H6iLFarWy1oJ5rMokfhxFEh%2b4GRlfkTsz5QXkFFhDpaOOxxwcIze4YTX68PY6Bg8Xg%2bcdD8xERS2nMkQa130g4GAiChVgzCa2DkpDVyX5pF3tiJdYhHnzMMvTJ%2bbxvFhwu8TeQHefRlMNW%2bkJRDKsuYtlYUCZFfY2gNrzABWjgygRByfGMl1DqxwkJVLJs41qNIlzzJ/tMTtOTfAfbmdjEvKL9bUII0UaWYOSyw/S5Dk8X2CxuN%2bTDKwC2WulhJQaG9GnnBARo%2bzy%2bTEiZwhFWAU9JyC8amNyXzJ9vw/iy1jfBnilrkImZnm/iqKkxdLp5iXzoSikIpqW35fTg/XmaNF3HaEMEKhrFkHRVNv/gOZziMIJpKEpnzCpnKWqD4oWuW6XWIkpdtf%2bQ2elZfHk2Rx51IygJnOJL835FIkV%2biMq31ZGph5FQWWc0A2LT5543hmCmXBtFrPkYO5Rwko5e0YQP4DirSzEn3ZxevMQMgqMVJRkxsWYS1NTY01SIxIUvuanaGyRXtNeHwK6f9BLy0TI8xtJlZgw8PDQvTsIKgKhc2MsUpqyP8kcjMnN4RUcVJWIXkZfdXEiTB3PCY9yweJJnQi7a9SoUr8jO%2brZdA6N2iZmrL5wLFiCi%2br2DytI7aKwmnzR5bCPkvbLBZXQSSXQSiXRjCbQrSYQ4AVYDhSw2D%2bcIu/TM2WCiIWoGlkHbIeaDm3oHLGhVLGKcpyluppp6BKntpk9TY5qmslMxSuWH6BWaNMLBbTMDeo11l7s0Sx8rL69E7F82q/rg93o%2b/Aviq2SKbqdsjYFGXzjg2Poa29Cy1H2tHd00fUj08/%2bwIjo46aY1IXEOEK437%2bLIYnzAqQ6xwZYkVmlSO0ZYD67SBp67a2NvHtcXd3t/HhdcVKB0iIq4vntuEWPDnwAf578CA2btyE3rGRGshclklP6UPQu/mbQ/5Gib8tYOLvCvi/kZFhY2zuYzaD/wOhWCccnByNbgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1269\" alt=\"image\" data-srcset=\"/blog/assets/static/gridsome-starters.82a2fbd.919df161805a24d076af54d5023d3880.png 480w, /blog/assets/static/gridsome-starters.dcb9938.919df161805a24d076af54d5023d3880.png 1269w\" data-sizes=\"(max-width: 1269px) 100vw, 1269px\" data-src=\"/blog/assets/static/gridsome-starters.dcb9938.919df161805a24d076af54d5023d3880.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/gridsome-starters.dcb9938.919df161805a24d076af54d5023d3880.png\" width=\"1269\" alt=\"image\"></noscript></p>\n<p>Gridsome Blog Starter 레포지토리에 들어가보면 스타터를 어떻게 설치하는지 아래와 같이 설명되어 있다.</p>\n<pre><code>gridsome create my-blog https://github.com/gridsome/gridsome-starter-blog.git\n\ncd my-blog\n\ngridsome develop\n</code></pre>\n<p>차례대로 실행 후 브라우저에서 localhost:8080 으로 접속했을 때 아래와 같은 화면이 나온다면 제대로 설치 및 실행이 된 것이다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1886 917' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9574968fe81a40e21cbc4e116f038e6d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9574968fe81a40e21cbc4e116f038e6d)' width='1886' height='917' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAYAAABXscv8AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAEIElEQVRYw%2bVZ247jRBDNH/Eb/A8fwAMSEjwgrZZn3pGQQBrY4TLDaJgEsYJFQiywAjJJfL/bcWx3%2b5IcqjpxNpqdGVazweswkY66XN22q05XV1c7g4UocZ%2bQFlK18SJX8uC%2bEjDVTUVC9wSQAa0R6Q1yFwS08mshoH15JisUZb1jlOwsCtp3DroPwXYWKrhJCt0PldwalXYUAe37XkMOkEgyCaDG2flneP/heySnmOdtBMhO7RksOmackcsadmzjw48e4IOH7%2bLp9BfIaol5IV7MC4dOwHWJR9C6n3kJ3nznAd54620c//wMyxUoCmTnu8Kgq1lnzHOhsCahQVFLhNkcdbPa7stpLl%2b477/cJQZdzLqoV5gZJo4ePcLx16c4OTtXGH3/GB9/8inOhyN8c3qGr07OcHT8Jf74awxJpFz3rIOKAJ7tKM0UwnkK2w9geWvYlP2dICLZx3imw4vird6LEhURUbpQ7cFFwPNyM4PpepiZtnJualiYaAZFgw3D9qCRfqKZ0C0Huu1SdWaR3lVjdduBZtlww%2biwlwAXOwyWmQw3CuCEPiGA6TnUki4M4Sex0rPjnAy398mqv0vgpmR3nV7t71QETf8sMPu7gKUL6BOB8e8FfF9Cuyxw%2baxAlNCz5e3Pulo0vQpBg30mu5cZaxkCxrSAYwnYJpNQIAiFujYmTAA9T64rxn2%2bu/MIuAlZRYVQTUujfC7zjG9l8fLP2kduGOzD%2bZzWad00qGpGvWmvR1nVhN3rnf6qufXeFvwusadD1F4IYGO6/jEJPSKgUkY1ZFQURyiKAint%2b9wKIQhSyVIKSng%2bFrQ98m%2b1Wt0J/ONI6B0Bkpz9/IsjDIdDfEuV3enJCUajEZ7%2b%2bhuGF9/hpydPcHFxgR8e/3jnme81AWwcz3ie5zTbchsB3La6siwJUumrqtqO45Z1Je0ASq8iR6CmnMJtlmVqTPvrJQFNU2NyeYnpdAbDMBDHVN5aFl1PYdlU1bkODNNUOk3T1BjTNKDrOrXmpm/dv%2b4zEQS%2bksfjMSIql3tOQAOLjDY3CKnacxyXQNXdfA7fc8mZdZ/nukSIRzVASE4GakxIZS/Ls5mm7uMxrGdS%2bB6Onn4TQOGqa7oy2iXjeSZZZpimRX2aigSeUdZ5nqeSoiKEDkU29cVxQjMdKcKiKFQyk5KmnFRFvwlYLpdq1ha0Xjn82fgkSQhz5QA7zE6wcyHNPJPELY9jZwMig9f8wSbBJSfBzXbXJr82uXESYzAhTNQtLh7uNsgE5Jz52WnO7psagJHRLsCEMAmcK26rA/6tRuj1EvApU/OZ3nA8ZPwFmIoe/vBhur4y%2bmoo/68KITaOzwKSsjWDy1VGyfs6jWmIoLtWfz0n4J6fBTL%2b8Fny31w7kFeu9wh%2bVy53vge8wnH4H3vAACDqzpsWAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1886\" alt=\"image\" data-srcset=\"/blog/assets/static/gridsome-blog-starter-index.82a2fbd.6a8cb401a9398752d3ebccd1e7b7793a.png 480w, /blog/assets/static/gridsome-blog-starter-index.cbab2cf.6a8cb401a9398752d3ebccd1e7b7793a.png 1024w, /blog/assets/static/gridsome-blog-starter-index.c42411d.6a8cb401a9398752d3ebccd1e7b7793a.png 1886w\" data-sizes=\"(max-width: 1886px) 100vw, 1886px\" data-src=\"/blog/assets/static/gridsome-blog-starter-index.c42411d.6a8cb401a9398752d3ebccd1e7b7793a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/gridsome-blog-starter-index.c42411d.6a8cb401a9398752d3ebccd1e7b7793a.png\" width=\"1886\" alt=\"image\"></noscript></p>\n<p>이제 자신의 GitHub에 my-blog 레포지토리를 올려 연동시키면 블로그 개설을 위한 사전 준비는 끝난 셈이다.</p>\n<hr>\n<h1 id=\"프로젝트-구조-확인-후-블로그-포스팅하기\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0-%ED%99%95%EC%9D%B8-%ED%9B%84-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프로젝트 구조 확인 후 블로그 포스팅하기</h1>\n<p>프로젝트 세팅이 끝났으니 이제 본격적으로 글을 작성하여 블로그에 포스팅을 해 볼 것이다. 프로젝트의 기본 구조는 아래와 같다.</p>\n<ul>\n<li><strong>content/posts</strong>: *.md 파일에 포스팅 할 글을 작성</li>\n<li><strong>src/pages</strong>: 이 폴더의 파일 기준으로 페이지가 작성되고, 라우팅이 된다. 예를 들어 About.vue가 있으면 my-blog-domain/about으로 페이지에 접근하는 식이다.</li>\n<li><strong>src/layouts</strong>: 페이지의 기본 레이아웃</li>\n<li><strong>src/components</strong>: 페이지를 꾸미는 컴포넌트들은 여기서 구현하면 된다.</li>\n<li><strong>src/templates</strong>: <a href=\"https://gridsome.org/docs/collections/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">컬렉션</a> 노드들의 단일 페이지를 구성하는데 사용된다. 여기서는 블로그 포스트를 구성한다고 생각하면 쉽다.</li>\n</ul>\n<p>content/posts에 sample-post.md 파일을 작성하면 해당 파일을 @gridsome/source-filesystem 플러그인을 통해 my-blog-domain/sample-post 페이지로 만들어주는 식이다. </p>\n<p>sample-post.md 파일을 생성 후 아래와 같이 작성한다.</p>\n<pre><code>---\ntitle: Sample post\ndate: 2020-01-12\npublished: true\ntags: ['Markdown', 'Test files']\ncanonical_url: false\ndescription: \"샘플 포스트입니다.\"\n---\n\n샘플 포스트입니다.\n\n마크다운 양식에 맞춰 작성하시기 바랍니다.\n</code></pre>\n<p><strong>gridsome.config.js</strong>를 살펴보면 마크다운 내의 front-matter들이 페이지 작성에 어떤 식으로 사용되고 있는지 확인해볼 수 있다.</p>\n<pre><code>templates: {\n  Post: '/:title',\n  Tag: '/tag/:id'\n},\n\nplugins: [\n  {\n    // Create posts from markdown files\n    use: '@gridsome/source-filesystem',\n    options: {\n      typeName: 'Post',\n      path: 'content/posts/*.md',\n      refs: {\n        // Creates a GraphQL collection from 'tags' in front-matter and adds a reference.\n        tags: {\n          typeName: 'Tag',\n          create: true\n        }\n      }\n    }\n  }\n],\n</code></pre>\n<p>title은 해당 포스트의 URL로 사용하고, tags는 태그 별로 모아볼 수 있는 기능을 제공한다. date, description 등 다른 front-matter들도 GraphQL을 통해 페이지 메타 정보 등에 활용할 수 있다.</p>\n<p>sample-post.md 파일 작성을 완료한 후 다시 브라우저로 돌아가 아래와 같이 제대로 반영이 되었는지 확인한다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1075 753' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-065259fb7927e4711227a15a87aad02b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-065259fb7927e4711227a15a87aad02b)' width='1075' height='753' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAGPUlEQVRo3t1aS28bVRT2mv/CD%2bAHsEAgFqxYdIPEBoroGlWICEEfSmmbPui7CLVpEwRUAlFVVKItFaJq06SJndjj2GM7E8dve%2bx5embsj3OuPY6TJhFtHDv2SMf3zJlz7/h853EfdkCz6ugf2aiZtuC5bfHc1jvyflOgby9rG8zGstGqYaGiW3RvdUDQBgBCXwFYjwIHTbQuy2msR4LVfxD6BkCtHfZV8rTn6bj6yzTe%2b%2bwLRBNB2I5DcrsVJSOdApYDzdCgqQsYO3oYHxw4gOtTF4FmltKhXQdGMgLahlVNF7aZQ9Ocx9zj25AfXkEq9gDwoqga5qZUGTEA2LuG7SGnZvH%2b2DG8/dEhHD0yhjcPfol7Mw/gei4VRrvvs0H/agAZplNbrBl46/BZBN79GG98%2bAkC73yKKw%2beioLIM8NQA9A9x1fbxnDbzVtU8IoVA9Ozf%2bPazB08fCFRUWx09Lp1a91Tp7k30RHYC08bdRcOzXOW24DtNQWxjO8NxyMQPPgXT4e67QjiPkKXnnPL%2bibxezk7BPbC%2bEwujyfP55BQFCxGYghLMeTLKlbSGUE54hcjUdz54y6UbB65kopCuYKnMzNYispYyxexJEUhK2tI5wqdxdO%2bioDNS9pOiJPnJCmMYycnMDl1E%2bMnz2Di1ATOX7qC706cxvcXzuPGT7/i3r37OPj5IUzeuomxr4/g7p/3MXV7EmcvXMaJiXO4ev0avjk%2bjp9/%2b52ioLEpJTYuqQcWAd0v98PYp3JNF3JVN4VeqaoJI3xPckFs3dexGI4guZqBSdGj6gb1NcQY4vmmcX3qhfE9iYCKZggji2pNGMnEMibmGYhCpSqMYZ6JdZmYZx0/evznlS49HsfXL7XfUW73GWgECC%2bSJ5JKmryXRjgaQygiIbgUhpLJUQ4vIxpPiFyfWwghsbIKKSZjlXKe5fHkCiLLcdGPdXic5URS8CzjWhEjnRS13I91FxbDom8oLAlA%2bP37JgU2bnHryBZKWCUgStWaiAAubNwqa1lki2Vxz22uVBHyNAHD3uZ77ssgMu%2bn1041aF8A0P2F%2bAuz59hTbMhyIiUiYjWTF%2b2ynEREeFUmPiXAYM9myHD2NuuHwlERJZxe2xm8L2rAdpWZp0Oewy3Pgd1wQXtAWH5Ly16rQXN90xP3Ji2OTJf0WbfZ0rEbDTHGVu/YN7PAVqB0n/RUVAvReR2hZxqiQR0rCRNyxEBSMrAc0hGhZy8eaygULWTTJhZJLzyrY%2bm5BiVFM0G9d4b2dSXof9mqZkOaNRD6l0B4QgYTv/RUx/K8AWnOwCLxc39pyKQt5HMWFkmHn88TKAqBpdf3/qgssGVR2S11rdpMr07h3iLmmQyXWiKLeLtZF4bqdvt5W9dwuozf5ffZKYoCva6qL0cEEW9zjfbhp9GW%2bbwv7%2bity/Zio7ZjCmxX2EaBXikCDApHl7aorucNPTmutyGVNoOwJQBW3cGoXI1mk1LKejUAzDYATersU6PR3HC/TthGPngSANB6YtcAdNCkwVpgNNYPNNr3PnXLB3n1DAC%2bbMtEpaJufAEN7ND09VLIkdxrAzFIEHoCgO/RVCKGy5cuYnJqGuMnjuPWzRs4dfo8vh37CslkEtd/%2bBFXL1/C9PQUzpw7hwJtYkYCAH%2bQOi1JU2ToUjgCWY5jbuYZns8uQI7HoGk1PHr0D%2bLxOBKyjLicgOM4owPA6xoxUjXAoQgIBoNYIMplM4iRtzOZDFIrK5AkCWvpNSjEryqrG/p1t5tlQwUAD1JVVdrdqSK8bdsWrUtb2FqtBsuyKE3qgnaaknYTUUOXAoNOi55GAHu4UCgIKpfLwuu6rqNUKgmqVqtCns1mqShqQqYoCorFItLptJgphj4FGAQ22vbDndLANA1hsGmaQm7Qc5EixDMohmFApbRhcIYaAG69ZutnLF4ZMO%2b3QkYfLn2wjFtfPjIpwDuqBFX4YDiKWCKBUIQPNhNIprNwSSVfKiOWVMQBp5wivSWJZJWX9hNDGwG8tNVMq/XDBC2Ji2UiavkHDPY47x75JeVqDapGtaFShUb3/a78g5kFdng%2bMivBYaXXBmCUDkSar3Mgwr/c1h13JMiuO1v8O/V/HIp2/2Vl2Gmgx%2bL7hbaz6z/JwpttnIv7ygAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1075\" alt=\"image\" data-srcset=\"/blog/assets/static/sample-post-card.82a2fbd.a98e9b9a8cd58d1ad35a4acdab971883.png 480w, /blog/assets/static/sample-post-card.eb61b4c.a98e9b9a8cd58d1ad35a4acdab971883.png 1075w\" data-sizes=\"(max-width: 1075px) 100vw, 1075px\" data-src=\"/blog/assets/static/sample-post-card.eb61b4c.a98e9b9a8cd58d1ad35a4acdab971883.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/sample-post-card.eb61b4c.a98e9b9a8cd58d1ad35a4acdab971883.png\" width=\"1075\" alt=\"image\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 975 771' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-f004aad3dd8e9f003ccbde87cef01f49'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-f004aad3dd8e9f003ccbde87cef01f49)' width='975' height='771' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAzCAYAAAAn3w6xAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAHK0lEQVRo3u1aW28bRRTOT%2bCPIMFrxR8AHpB44om%2bVTwggcQDDxVUQkiA6E2FAkrbNLSk9KEpES1pK5Gm9CboJU2bOHG88WV93fXd3rV31971xzmzXnfjJg1patdxWelozs5tZ74558zM2TOiGRaeN1XrpiCXN3y8uSHfnXbn9YpGetk5D96wW9BNC2W9jkrN6FDNanYmyuQv04xGXybfMwDcSbl8RE6gpBtwAFgtImJs4tV8kYBpwmg6qDdsNOGWcVppg7VjJcADQCd%2bbPwkToyfxqmJMzj6w/f0fgpnJyex/9sjOHjgMKR4CjNXZzB6fAy/nPkV56emcODwISxJYQFIZScB0K3DNauBG7du4fjYOH6emMCly5cweW4SX%2b0/gN8vXMbosROIplSMnRwjYE7j3G9TuHBxGlMX/0AslRaS0WtbMNKL1eeUxVs3GzDJBpDkCxVg0TdtB9liRby32mKfzuaF6DttYr7eVo1eq0FvJID0l3U8X67SZMtQCyUo/F6qIEdUquqdsqSSFWm2XSet5kQd5hMZpfcS0C222yWvr6SiYjUWJ5Kh5ApilTNEYTKKnB9NpCgvJ4yknMqISa9GZSwsBRGJJ/AosIy5hwtrjOHzHmNHAnqBLm9zHrEqeOTP8%2bp5ZSzyvCtwHqdMvVLRdSXAvxe/CCoztbdATrvPDtul9Q5aHQngLatJBqpp20NJNs3NoF1pQxWoUTrsj9VoPnHAWiMB/LRaraEkfsytAODnHcfZ8sf8/It%2bvHH8Zwnwp9v54KA8WwbAa1DIqgjQfjw9PY1kMo3QShDBlRAqlQpCwSCWl5cRXFpEhg4vWVVBgPhcLrfzJaDlOIKPhVcxe3UWo6OjCIZWsbj4CHfu3oMkSbh98ybuzT3A9WtXCRSJ8kIE1gJisdgQAOBTA2eTSdi2ve4Hn8VI9QqwvtuAQbMbzywBGul6oVBEuVRCpVpFsViEpmninYnLFIUuLFRPyWSQzWah6bqwA2wnVFVFuVyCVqU25TJ0KisW8tRGFf1wO%2b534CTAa1DMZUmnZcTjcTFoKRSiyeXJICaRSqVEyvYgq2REGo2EUaRbXjKRID4KWY4jRXUYJAYln88hHotgYXEJGWrDfaQpbTQaL7cKiG%2b1BkoCBCMMoDekVhfZtFNwuXBiuOMXKdplmxm8bpAH0gZU9RrdzZOdO3uUeHZSJJWcqN9o2pSvQE5mKF9FkmglLNMtrrbl3WAgbYBeN4RjIxyVXedGNIZw25nBrm6%2bZaWzBeHFicZTIg1KURQr2kCdBbYOgF8VNngcp/W4rk9NRFkfVrXnEtDyprSJHguUvLxOWWvgbpb/X4c3uw6/9A4Rjf/jWQ3Uh5R4brqxjld4jVN0mKm2/h/nkX79hR0UeqoE9JPKuiH%2bGnP8gGb099tP2IC%2bIO/xPAij2TFM9YbT/pVuunX6LI39AaBtZF0704BlFfD18WN456O9dKoMwGhYlO%2bBYw0fAN7K8uRNs4DQ6iz2fPwhdr39LvYfO0RykCZ1MDu70XBKgOECYNfDcOoPMT87jvD1E4iGZuj6uIyKXiGgGsMLgDhsmU0k1UXs/elH7PviM5wf%2bwYfHPwOUuw2DLMqABpKAFgF%2bMcnPxM37mDkjd145a09ePX9TzCyazfeOzJOZ3BH1KkOOgDb2TZF5AjRvrNX8BpJwOtffoo3Pz%2bKQEIlQ9gUBxbeETb7xvM8u/QVAK%2btYwMVq4i8qcC0mrCaduf39Xb29L6pgLg9%2boIdOLDBIy/QoZvWBExwG6tFtzPQu70maMILm%2bMYIa8vf3CF158IpPAFUfVVAngwHNPDbjAmdpmx64zDYTgUhl1nHArDFJTCIuU68bSCBFFYZq9SUoTCrKxGEIpERT8cS7QSjgivE5ellCxC4SiyxZIIn4kl05Ao5X74ndvwWPoqAR0A2gFOPCieXHA1LCaWyRUQS6QEMShSJCbq8WB5QhwvxP5FBsqrw%2b3Z1ygAIEC4z3g6g2JVF0Aw2JzHxABF22AzmH0H4EkV6BZ3R6wQrypP2At%2b4qgvTzLiBECIgGHfItdhMHjVuY6SdwFiUAR47VUW32qLvqciXrjtQBlBLuNoMF7JeEqhCWQRCEqu%2bNNkpIgsJs5O1oicdKPF1LwAhaWH6/FKM1As/gzQ0wzkCzGCG4HR8S61o7zMli1IxAEzT%2ba/AQeG7aYeGbZr3AyHdgTYgjjfdNxV3hGRouuFwksPdaws6lia0yBHakjKdcSkGuTVGkKPdASJAn9rUJQ6SlUDyw/o/R7pfbAGKaAjl6erstnb0PmR3gRK00BNC0v/6Lg/o%2bHulSrm/9KweFvH3KwGab6GB9c0wd86XxETrtBliOve/1PDPJXdoTaqatCWuYNCZbuBqNsWibVLzNebLl9rtPMpz4T7zm28%2bl7KP192XLj8GlVgP5yf6l1p7bGvzp/nr99rl92/L2FmHzQvAMQAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"975\" alt=\"image\" data-srcset=\"/blog/assets/static/sample-post-detail.82a2fbd.c88efe9fac1dd271820e493c96a70195.png 480w, /blog/assets/static/sample-post-detail.3bfb6cf.c88efe9fac1dd271820e493c96a70195.png 975w\" data-sizes=\"(max-width: 975px) 100vw, 975px\" data-src=\"/blog/assets/static/sample-post-detail.3bfb6cf.c88efe9fac1dd271820e493c96a70195.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/sample-post-detail.3bfb6cf.c88efe9fac1dd271820e493c96a70195.png\" width=\"975\" alt=\"image\"></noscript></p>\n<p>위에서 언급한대로 태그를 클릭하면 해당 태그로 묶여있는 포스트들도 확인할 수 있다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 935 896' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b7d0353501649f5ae38a6a98f9147b40'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b7d0353501649f5ae38a6a98f9147b40)' width='935' height='896' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA9CAYAAAAd1W/BAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAIO0lEQVRo3u1a%2bVNbyRH2f5yqVH5OJdkkm9%2bStTdOKutsdo1NYi9GZjGYyxivbU7d932BBEhI6NbTAV/6G2mEYPEWh8HISFXDzPT0zLzpr7vfm27ulOsNXGUp1QzUWgeoNduqNA%2bhaIou/YrRRL19qOjsk94/96qf785VHpyl2mghnkwikd5FNJ7A2%2bU1lOXQpG9t7yBfqsLr92Pp3QrCiU0YIoxCpXYth79yARSrdRwA%2bMuXf8bIk3EkEgl8%2b%2bB7/O3u1xh5/F/84U9/hMXpxBNp//Z3X%2bL3X3yBr76%2bj4cjj5Er11G5Bi24cg2oNVsIRmJIZ/aQLxTh9vjxauknLK%2bu4%2bX8KyREC0LhGBaX3mFqZgY/La9i8fUbZAtlZR4DK4B%2bQVCtqfLs18UfaHtnzUNWRUgNUZWWaIvRPlD8FeOafIDeRCP2sQvXpin0aNLW/X56sY9e6tZX/Vys71yXt71RpU8IV64BN7L0mWdPA%2bhxq8btKD0h9Aug1W7jNvwODw%2bP%2bYGfCYAMn2vh7%2bCAAqifTwCa3j8%2biMI6swDk77FDtmVMl6OFDlQhTbdPE9hNUn313Idn0YBOC%2bVy6VKbDawA%2bGs3DTx8OIK3b5bwcmYaT57%2bgLm5eUz%2bOIF7f/0K8UQSXo8Hzyd%2bxKuFBRmbk%2b/7R7IBjmnQwAoAB23My8HG/jeKp2M/4PWbN7h79x5M4yb858ED2B0uTE1O4dHoKKZfTGLsmQkzs7OyzsHgm8CHDmDU68f6pVL5gxsNtg/oMpfLZezv76NaraIuhzcaDTSklEqlI1pN7u7lClqt1o09/IUF4HG7YbVaEI3FkU6nEI3GkM1mkUwmEYtFEfAHkU7G5bobR2G/8LNX42mvzYERAPmJKhFvNJvyumuhKTUL6U1FO/p61K/IX3oH97cHQgOu4gEGxgkS4Xw%2br3xALpdT/kDbPmlsF4tF1MQHZDIZ7O3t9XjS6bSay3k0F/IPlAZoleaBeAgehgevVCqqaBpr3dfOkv1UKqVoFEw0Gh08AQxN4AouOgNnAmdZ7CZffj7Ca/CWxgNuR0ToFAE0mi201f3%2bMy5yPgJ9akisPzb/uZdjeYFblxM4kXm%2blYmRjsY3homRYWJkmBgZfgh9SACXEMQJIep8wU0Q7rkyQ8fVppP40AmR/sTIyaRIf7//p%2bd9qgvRuS9DfGAGQRkK0z%2bGwnSw5Cw/xhSymYzMa3/yC9O5BdAyKvjH3%2b/h7v37ME1M4OXUJP79zbeYeTmDb/75L5hMJszOz%2bPZ2DPMzc6pIMj3332H%2bcXXGB8fw8TkJAJ%2bD371699g9PEoFpfeD44GdHjbmJ%2bdxvTsLB4/GsHCwiIWF17JwZ/j%2bbgJEyIU0/MJjD8bx/L7VexmcpiZeoGnIhAmT94vr6BQyOGFCGxahDHxYuba/cBpUeqzaUAvPzj4r7yTWnf2iJD4gEq12guFNxqdcLjKCEtN%2b9bhcdo46Qyha37evnTo/LQMsg6ja5pem23OO3Kkh72ki5on7WN9tW5bJWnUOupZG72Q/cmAzdmjwoYBt8cDu8UMjy8Au8MBh8MJn8eNzdS2%2bqfHnZ1dNb66bkHA68bbd8tqTiwaRiAYhtfrQSgUktqr%2bF0uJ8xmMyLRGPw%2br0q4RMJBLIu5eH0%2bRMMh2OxOoYXgdrlgtsi6gQAioSB8gaBaw%2bvxyrPYEZe5bpcbqXQKW5ubsrYLa6urMuaEzWZT/YubgMqNtlGt1pTEDREG24z4MlLMDDDD4Qr9vkQJJU9enVCpS5vIsNbjVUaWu5rFtwz3MRRfrcNbN3qawyhzsVjqJGeEh3VNePR%2b1WpFnqPeQ5z8XEs/26VMgDk/h6BuERQ2zBasrKzA5fao/uZWCru7GXhEyj5BjnxOpxOxRFIc374gFVcI%2bAU18/oq3F4f3DLXKXxrK6sqb2C3WWG22pUmxOMJuJ0OJDa34BD0rDa7ONWM0GNqLe7pdbvg8gZgs1rgES0Lytpx0Qi3aEQ0ElH7raytw7zW0abuYS5mAsoFSk2pE/GOBlSV5GsKlSKafagzGVKpVLvfDe0OOtIn8hzjfKLe6KLDdY6SrYbi03TuU5V2o5uIVchWKr1x1hph%2biXy0F900BcNqXXmX%2b4tQB8gD2YXNHxig%2bFwBOFQQCFDxFLpbUHcAY%2bg6vf7RfoOBMJRsU%2b32GZU2avNvA6r2DP9wPqGtAXxeDwOn/BHBDF%2bN%2bxsp0VLAkgI0uuiZdSSfD4Hq/gVvz%2bAbHZP%2bRCbvbOvy%2bVR86KRsLJzn6ztFq2g7/AHA7BYrdgRzQwG/Mhks5dzgpS8RkB790b3y1B7bK0VPZulfVNjuqj0I1jvs91Ws%2bNXuJe2faJHfv7Y128Ctom0YdRFGyvd5zB69k7NY1qOdPoo8jZlHf3VemEBUNUpYdpfIBRGPren/iXG6/UL8mKP4oF3xQP7xdtnM1nRkpCyw63kpkLP1kUjKegyReZwupTN%2buSNsLGxgZBolUt8Qlp4YtGIvGn8ShOCwaBoQsd/RKLRj5aNusBdoK1yenu5HIpix5QwHVyhUERJfEAul1dCSm9vK5ukr2AhYswLxmMxhVixWJC5LewXCgq1kvQ5Tu%2bd2tpCoVhS3pzj5M3LntyX%2b9DXnLxEXeRL8EbkBj91XvH8lyGxISJAu6InZyG6RId0trUd6vQ56QVBkjap0%2bdUf45d5h7wMYRwIQHwsLu7u%2boQPCQPzHpnZ0cdkmM8KOuiMovOWEzUnzR6bH4nkPdT//vMMD0%2bTI8P0%2bPD9PgwPf5L6fFmq90X1T38DMuBUn8GUD6YHu9I5jaUo3zo/wEYAHISNMRNvwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"935\" alt=\"image\" data-srcset=\"/blog/assets/static/tag-page.82a2fbd.758cc8cdbb92833ee832daf298739b51.png 480w, /blog/assets/static/tag-page.d95422c.758cc8cdbb92833ee832daf298739b51.png 935w\" data-sizes=\"(max-width: 935px) 100vw, 935px\" data-src=\"/blog/assets/static/tag-page.d95422c.758cc8cdbb92833ee832daf298739b51.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/tag-page.d95422c.758cc8cdbb92833ee832daf298739b51.png\" width=\"935\" alt=\"image\"></noscript></p>\n<hr>\n<h1 id=\"github-pages를-활용하여-실제-블로그-개설하기\"><a href=\"#github-pages%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EC%8B%A4%EC%A0%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B0%9C%EC%84%A4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitHub Pages를 활용하여 실제 블로그 개설하기</h1>\n<p>이제 외부에서도 접근할 수 있도록 실제로 블로그를 개설할 차례이다. 여러 호스팅 서비스들이 있지만 개발자에게 제일 만만한(?) <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Pages</a>를 활용해 블로그를 개설해보도록 하겠다.</p>\n<p>GitHub Pages를 통해 호스팅하는 방법은 크게 <strong>my-name.github.io</strong> 레포지토리를 만들어서 띄우는 방법과 <strong>gh-pages</strong> 를 활용해 띄우는 방법이 있는데, 본 글에서는 후자의 방법을 사용할 것이다.</p>\n<p>우선 아래 명령어를 참고하여 gh-pages를 설치한다.</p>\n<pre><code>npm install gh-pages / yarn add gh-pages\n</code></pre>\n<p>그 다음 <strong>gridsome.config.js</strong> 파일에 아래 내용을 추가한다.</p>\n<pre><code>siteUrl: 'https://my-name.github.io',\npathPrefix: '/my-blog'\n</code></pre>\n<p>마지막으로 <strong>package.json</strong>의 scripts에 아래와 같이 명령어를 추가한다.</p>\n<pre><code>\"deploy\": \"gridsome build &#x26;&#x26; gh-pages -d dist\"\n</code></pre>\n<p>설정 완료 후 터미널에서 <code>npm run deploy</code>를 실행하면 <code>gridsome build</code>의 결과물인 dist 폴더가 생긴다. 그리고 이를 자동으로 gh-pages 브랜치에 푸시하고, 이 브랜치를 GitHub Pages의 소스로 설정해준다.</p>\n<p>아래는 현재 이 블로그의 설정이다. gridsome.config.js에서 설정한대로 <a href=\"https://my-name.github.io/my-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://my-name.github.io/my-blog</a> 가 제대로 퍼블리시 되어있는지 확인한다.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 747 652' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9eb44667e95dc98cb17d7175943d7119'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9eb44667e95dc98cb17d7175943d7119)' width='747' height='652' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAMqElEQVRo3uVbh3bbxhLV/3/Pyzl5cWI7cSxFzSokRbGJDQRAgh2NJMrNnUUhKFGy4rjJoc54exvMzt6ZXR94ngvLGmM%2bn2M0HMJxfXiuA9f3YS8X6PQHkN9ms0EQBIrkF8exopf%2bO%2bh2uzg%2bPMLbd3/i9a//x%2bHZBX569QqnHy7R63bwv59f4e2b13j1%2bg%2b8fvMWJyyPEw7kTHjJdBDwy47HYziOi9VqBc/zMLIsLG0bYRioPEMf4Lp0o/KWS/uH%2bPK5BGRLkTVFUYxsbRKGUbSz2DgV/SAMFYVpWIznecG2LM%2b/l5eli/08aBskFN6r/6BNoe5u39F%2bStd2kC6rwJP76Zf9%2b%2bgWmNkBOoaHhu5DG1Hcp2vcMt6z1tAnrlKOummg0%2blgOBxjwO3QH%2bgqbzodQzOG0HUDs9kMw9EIk%2bmMStVCt99n2oIxNKFTuS6oUA3W0wwTg8EAhvTJOuPxhNtqoUKLZBoD9Ni/KGaL7TXW7WkaxkxrDIfsW%2bZkst96o4WBZkDnuNbYYr%2bcl27CMAzVbjKbJwt97E8YYHsRTGuDAamjr7FwIjT1FUptH%2bZ0hRkXJAvsd3poNTvo9/ocyMDQHGI%2bnUInA2QS1pCT7Wmc9AQG0/2%2bxgWTObJYLnq5WKBZa%2bCu04fOsj4X32P9kWlhwTEkNPURx%2bmg2xtgPCKzuzpq1Rru7jqw5zYGbDdi/nQ8w3Qy4XgDjAwunPObTqbotXvotsl4jtdn36Y5Qhx%2bRAcEcQAn5rGXkh068NK4E7uwIw8OfFBFwo49FbpMO7GflznMW6q41EnKXKzzdnnd2E/bb0nqSL9SlvWV5Wd1PPaVje1kY%2bd9bcdI6m77ljaLwME8sElOgajMGUYiAdNgiWrUQRODnOrQ8niD8YZKa2gV6jTzvJ6iJqmBrgqbhbz78Syd5HVRj3uoKeqiFhUovh/2tumn6u/k9VT/96kmY4caNjzlDmZkgFT8YN/gdHZNKqPsN3E6L%2bNkVsK1e4srp4rzxQ3eWxc4nl7hmPXOlhV8YJ3DSRfvrB7O7T776LFND6eLHo4mjDM8J0n56TyJny2Tsr%2bmTDNe3fTJDDIz1nKmflGK5YP2cRcOEgbMQxvVsIO35jHOFmX81nuvFv/eOscb/Rgnkwu8M/5i/AS/9Y/wh3GCX/t/4t3oHO9Jh%2bMufu538WrQZbyHXwisftW7%2bKXHPIY/tTp4Y3TxhuW/SzjsqvQrtvmp3fn6DEgpZ0C2Be6g52JeFPn7WyCj/VtgK97F/H3xVlq/jmwLfB2qp9unGfYTBngbH9NgkdAmJcZla%2bQULnfTj9Fz6xXrfyvaLBVQOgiJmPbinh8HC%2b0HSES9gggP5J/1ysfV9TWurq5QqlRx1%2b6mKCp6iKhyrLgFE8lfxreHf7t83daM2L8cRSqMIhUW%2b877i/eDmE8mxCmcJgMybD0lqJkQTEwJSqZEdVKocH%2bKqbOfmmiKozM7QULJk37i6OGAYRQqc1qVqz4DhcX3/aIo3LZT9VEYI35ghv9Twyyrv2UAFyiT71Ajt4i4ZtMJSjcVVK6rqLfbRH93qJSruLi4YjnTRGq3dZ6k2oAo0ICY07XbW1SbDVWv3WzjplZDpdYiimswzfb1WyK0Dm5uqAaJJJvtFuqsXyMy7PZ1orY7ZWa3iTY77O%2b2Xkf1lgiw1cZw4qHU9XDWcmDO1qj2XFT6Hlqm90l%2biT0MSBwcYha7rqu%2blO/7WK/XcGkab4LEJJ5QQsRUXjFf0lK%2bkThJ4mu2k/zVKin32EdmYktZTCav14lTRQbfbAi7CY99lvueizGlz3U53iYZb7VeqbE3/EC2H8JfR0oC1kGE1SaCvwmTDRLjXzIg3QIeBw3VAKEKIzGPWXnNCQVhsjclXHERK%2bb5XOi3t/T%2bubbeywDhtOuvcPbhAqdnl7i8ruDPw79weCZK8QZHpxc4vyzhmGLaojHTp8Vlu77q5Dkm55eizyYBogcm8yX3bRN3XQ31VheXpRvU7mix0fJr0MpqMr9F0mntWbMlpgtb6Y5PUUTf2j/wQAkmHE21cLwrVErzFtwkor2zk6F4CrxcBqQ6wLadnf0k3mJZ/FPo6MuK95dh7N5TQPIq5QqOjo5xQT1Qqd6icVvhnr9CuUJ98P4IxnD8Tb7U52bCozhgziNJXFKLxVIdX8vlEpY1UaBIwJHkBepI9CktSyxsOzn%2bFG3U8Sn5EncdB/bSUUeYw7gcr47tMm%2bp4nK8ruWo43Hm8Ijz1snRJqGzimikfE0JUJEAjUZTafwWzVdNwInWR6VCgENQkwAUKsR%2bDzeUCAE%2bpZsadF3HLQFLk23M4Qil8rXyFzZY3qBC1c0RmgQ816USGvUWOgRSlZsqgQ4BEQGVNt7gtOngZuChO1rhliDnouPCWqy/2OXLoxIQFaBprt3vNU4UYLCrA/7ddB7N/3pbID0G5UpMHJzG0MKUR6JFZDZf2vyyFkxuBUmPp3N1/m%2bvx56vDPfVQ/xYW3zdLSALmnHPlqj8Xv/%2bHocn5/jj8JjKsI6j4zP8TuX4jorw6Pya9VwFnL4lAPocJ8yDY3BBJbdwPCz5he%2bH8tVtb5XkUZmFYfji/QHZDZE6BouIbldE42flvUTKrs0ORJyfvEN74m7tRVKYKHyxOneg8HP29I/0y5iRH4PPWWD8g4j/jhIUTqx8D41WC5dXJeUXLJfKyi94fHyigMvp2bkCQ9%2bTMbOLI%2bJnQ%2bq9p0BEmkyS21kJ5UJUHkIMie7U05mRBZunRBQmvr0djqYgKvMJFv2Fuf%2bP%2beIVShyfW39f0m4LxMRLFKVgKwy2vsG8zwyoiSW6I5VInDhFUr7Ih2DqoQSIV3i9gmHohK1tQtsqOn3a/QONOKChfHRlQuRuT0Or0cJ1uax8g5pGWCxwdzBQ8LnZaqBab6DJsjZJ/Hom%2byxXqqgzvyZ5hNtyuyxX7dVaFbVaHWUaYc12R/kkRfKqzJPr8cuLkuq3dXeHNsPrclX5E6vVGmF1A/XGHQxziG6nS4C2xFXbw4eWg7bpo6l7uL5zUNVctcinJSDltBg1vp/49ERDilEj8SRcqS%2bf%2bf6Sur7y5wWpVEi%2bnCjr1Ge4Sb98/qULXz17bBWmIGynXrT1RmflUZhobYnLHBOfYpLOvM1iQIXhVgKCcOtF/ugWyDrMn6GoCd5/cvIwT%2bqLU3ROcDSzEyA1tz2V/h6dII9sgZTLj/jpP/YTKZgSRrdpQYrrrDsYqvRj4Opbaf0nJSAoMOHZICcFFLJNZMHiJxxOZhhNF5gunO/WX7jfHI6Te7LiC6znUJDv6cSzXNwqL8cYKiDB/9IvN4YSbVr4qnuUYLjzXm%2bfbbBPQqLvlu7ZAsEe7%2b%2bPDYcfbAFJyHNZyxqh0WzittZInrBZFtMt5fe7vLxQl6ffmgmfQQ3e9wdsr8cXizlRWje5tSUD5P2doC15pCjvhUfW%2bLvS5J9dCcre8D1Pveg0jSFGQ0vF1ePE6RwT9XpzpGyEnlyTEQbLo8aBXJXrpnpuL69E%2b5quXnma8iqUcU0bqFAeXMrrTnlQqV6NEnLL40dtYKrHjcJ8g%2bN2aHhJPyKFGuGv1BObRNMMhUD/zfH6xNXY1kiRQZbp/YC6EpfrbtdTPn4pk7SCwiS50nalHkMh3/PzNhK3aVRl1%2bR5fXf7Mj0hX9XN8t20L5vjrfJr9rXKT9xxn37D9CQDfsi3QHH8nHuBJHNFQ0OeyYh4ym2QfFmhRD8s4fGLSDgnSX5iNi/VveJsNs9vlSY0qyVPpEgeQcg7XvmaklaPo1m2mC9UWyVtlBL5vwhz9iFmt5OSR4mQPqXunCR9ibQsqatkPJFI2abSXuoKSTuRFJlb8fr%2boxcj8pNFySAOJzMZT6Fz7w7NkdqD4hOQB8/6gDpBvfBeKuUoA0mZmLmyuBn3qsE6cq02ogIVZpgMhaESl/bCwKmK60k59//QNDEZiu4xMJuMYc9nXPhc6ZaB0iGG0jGSthgOTYvjW%2boWS/qQsWU8ma/MSfSOWLL/iAE%2bOSjvckTZjLmAsWmgx8UPqQTlObxhJJMRJWhwIjJBUV7y5eQFuUzCUItKpMhiPZNtR6I4OTmpI5Mz0jbCALHnp7MF%2buOA9rs819%2bgP1qjYVAXrKPPsgWefQpkfgERIeFelKI6iWdKT7ZJImZuorgohtJGlJmUb1L/gUqnCk7VTRWg2PNe%2bhYozE3xDRZuiLkTJJekq1ClN0G0947wvou%2b6BJ77pXajlM0yAyZovMiKkDc3O0V5%2bVRvHU9bcvibd141z21Uzc1vnLILE6QSB5sZi6yUL1RfOq/2XwyBVv/h8zlIM4X8F%2bjREL%2bBjxLlBLkTBZ%2bAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"747\" alt=\"image\" data-srcset=\"/blog/assets/static/blog-github-pages-setting.d4a38f4.334bb8aa5eb98506e07fbe4245f490f9.png 747w\" data-sizes=\"(max-width: 747px) 100vw, 747px\" data-src=\"/blog/assets/static/blog-github-pages-setting.d4a38f4.334bb8aa5eb98506e07fbe4245f490f9.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/blog-github-pages-setting.d4a38f4.334bb8aa5eb98506e07fbe4245f490f9.png\" width=\"747\" alt=\"image\"></noscript></p>\n<p>정상적으로 배포가 완료되었다면 아래처럼 접근할 수 있을 것이다. (빠르면 바로 GitHub Pages에 배포가 반영되지만 길면 몇 분정도 걸린다.)</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1680 807' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4adbe4d8e284a52c879753f9728f9fc4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4adbe4d8e284a52c879753f9728f9fc4)' width='1680' height='807' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAfCAYAAABXscv8AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAEIUlEQVRYw%2bVXy25bVRT1J/ALtE0TGhQITVseQQkilegnMGXAFCZIfAJijJgx6IRh1R8IkKQ0pvErsR0TYjuOYye2r%2b/7/bAX%2bxz7upZJpSaNE%2bdiaWmf1z2%2be5219z079unSClZWHhG%2bwMrDR1hcXMb8B/cw%2b%2b57uHlrGjduMtzG2zemIgfmV%2bzDjxZxd%2bE%2b7szO4e69B/hkcQlLy59j%2bbOHuP/gY8zNzeP9%2bQVMT9/BrakZTN1%2bh%2bz1Rs%2bHGUzPzCKW2s4imdlBajvHkaR%2bOpvnNpxLhjaCiHldYBRuh9C3vH/Kmqggppo2/s%2bI6baLS4XlQCOwNrPsJYb7er99WbgSAgbOkg1IhqbrD/qRJ0CzQuc9KIaJtfQ2qi1hQAKbj7YC7F4IWK4HW9vDt99/g/WNp6CURIQ4fD5yBAzHeHjKlmvjyeoT/PLzD3j89DEUvUlrhkIhKgSMJjwGxbBhkwK%2b%2bulXvPXl11j47kdU2zIMWqf017wkwhkrKZemANvvwMfLewVr%2b2SrVhuG5yPA0H2D2g5lR66W66aAUbmz07S8AHv7Rfy%2bvoGN538hvpXE5osEdvIFPNvYxB/P/sTOboHmNmk8iXWy2cI/g4SpjXw6J14B4Usajsfh0PGWD6uIJxJIpHc4AewamskV%2bDWbERDfSiCTzdGaFF6k0tjdLxFxHf51YBiH82NVADv5piij3hRwdNJEW9EgqToEWYWkGZB1k1uxP8YsGxNpHbOybqDeaKFGz9bIsrXXQgHDUm0rKpEgodGWOBl7pQOUKkc4qNYHKFWqfKxSO0a13sD%2bwSGN19AQRLQkBSdk2bOKYV3fEAglfEwXHlFT0JTaEBQiRhTQkAS0VZmTJZsanzsWBO4wey7cY2JDYDhJjSar0THD8lHetVAp2qhVHI7DfRvlgg1JclHKWyj/TW2ZnHbd19r3TRPkuQnQzvGHqung6MDiqB/2UGP9skVOO9xWSxZEyaZTZ3XB%2bUJv7AQMV22vOpFXwfD%2bC9Nj33uyfq/NLj/qGfe9MgXwO/0ZYDmnY3jOPuOel66AYQKCTgf81%2b2iS%2b0us93Qdgf9sf1of%2bOqCWBOvt67di8U4Z5XSoAfBPxFNE1FJpNBsVhENptFPpdDq9VCoVBAjtq241w4CRNBQBD05G0aBuLxTSSSCfy2uootutrm87tYX1tDKp2GQ5%2b18IUvRvmTQkA/B3TImqZJhATwPI9bXdP5%2bGkh8KZkTBwBvu%2bj2WxCVVUKB42gQ1EU6LoOt3/6pzkQGQLCk2fwfW%2bgAodi37apJLYsbplK2FzkFMCcZc4xJz1Sg0E5gZ0%2b6zMFsDlZliGK4kARESOggxZVbSetNq/gFCppXT/g1WCrXxF2oxwCLNmpVMOLsoI2QTNI6kQAG5NVDRLV%2bYykSUuC/wLZF7mHHDnAhgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1680\" alt=\"image\" data-srcset=\"/blog/assets/static/gridsome-blog-after-deploy.82a2fbd.799f94de2ec812477178bc0da133f9bd.png 480w, /blog/assets/static/gridsome-blog-after-deploy.cbab2cf.799f94de2ec812477178bc0da133f9bd.png 1024w, /blog/assets/static/gridsome-blog-after-deploy.58d2b6c.799f94de2ec812477178bc0da133f9bd.png 1680w\" data-sizes=\"(max-width: 1680px) 100vw, 1680px\" data-src=\"/blog/assets/static/gridsome-blog-after-deploy.58d2b6c.799f94de2ec812477178bc0da133f9bd.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/gridsome-blog-after-deploy.58d2b6c.799f94de2ec812477178bc0da133f9bd.png\" width=\"1680\" alt=\"image\"></noscript></p>\n<hr>\n<h1 id=\"몇-가지-문제점\"><a href=\"#%EB%AA%87-%EA%B0%80%EC%A7%80-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>몇 가지 문제점</h1>\n<p>블로그 개설을 손쉽게 완료했지만, 말 그대로 스타터일 뿐 디자인이나 사용자 편의를 위한 개별 구현이 필요하다. 아래는 필자가 블로그를 개설하고 만져 보면서 맞닥뜨린 문제점들이다. <a href=\"https://perade.github.io/blog/make-blog-with-gridsome-1st\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이전 글</a>에서 언급했듯이 i18n과 관련한 버그가 좀 있다.</p>\n<ul>\n<li>\n<p>마크다운의 front-matter 중 title에 한글만 또는 한글+기호만 사용하면 파싱 오류가 발생함</p>\n<ul>\n<li>해결: <a href=\"https://github.com/gridsome/gridsome/issues/918\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이슈</a>를 올렸는데 기다려보고 딱히 반응이 없으면 직접 해결하거나 우회해야할 듯 싶다. @gridsome/source-filesystem에서 glob 패턴을 사용하여 path를 생성하는데 여기에 버그가 있는것으로 추정된다. 쉽게 우회하는 방법은 title에 영문이나 숫자를 섞어서 쓰는 것이다.</li>\n</ul>\n</li>\n<li>\n<p>위와 연계된 이슈인데, front-matter에 영문이나 숫자를 섞어 한글 title을 설정하더라도 path 생성 시 한글을 제대로 인식하지 못하기 때문에 URL이 의도치 않게 표현된다.</p>\n<ul>\n<li><code>title: 2019년 회고, URL: my-blog-domain/2019/</code> </li>\n<li>해결: front-matter에 slug를 추가하여 여기에 URL에 쓰일 제목(영문+숫자)을 넣고, gridsome.config.js의 templates > Post를 '/:slug'로 변경하면 된다.</li>\n</ul>\n<pre><code>// front-matter in *.md file\ntitle: 2019년 회고\nslug: 2019-retrospection\n\n// gridsome.config.js\ntemplates: {\n  Post: '/:slug',\n  Tag: '/tag/:id'\n}\n</code></pre>\n<p>하지만 slug가 Gridsome 0.8 버전부터는 Deprecation 될 예정이기 때문에 첫 번째의 근본적인 이슈가 해결되어야 한다.</p>\n</li>\n<li>\n<p>GraphQL의 Post API에서 cover_image 파라미터가 있으면 값을 무조건 넘겨야지만(즉, null을 허용하지 않는) 동작하는 <a href=\"https://github.com/gridsome/gridsome/issues/471\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">오류</a>가 있다. 0.7버전부터는 해결되었다고 하는데, 필자를 포함하여 아직도 동일한 이슈가 재현되는 사람들이 있는것으로 보아 완벽히 해결된 건 아닌듯 하다.</p>\n<ul>\n<li>해결: 만약 위 이슈가 발생했다면 GraphQL 스키마를 변경하거나 cover_image 파라미터를 삭제해야 한다.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"마치며\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마치며..</h1>\n<p>이번 포스팅에서는 Gridsome을 활용하여 어떻게 블로그를 개설하는지 예제를 통해 상세하게 알아보았다. Gridsome은 다양한 기능을 지원하지만 비교적 신생(?) 프레임워크인 만큼 다른 SSG에 비해 아직 안정성이나 커뮤니티 활성도가 떨어지는 편이다. 하지만 좀 더 시간이 지나고 개발이 꾸준히 진행된다면 Vue.js 진영에서 크게 반길 만한 SSG가 될 수 있을 것이라 기대한다.</p>\n<p>Gridsome 관련 궁금한 내용은 <a href=\"https://gridsome.org/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식 문서</a>나 <a href=\"https://discord.gg/daeay6n\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord</a>를 활용하면 도움을 받을 수 있을 것이다. 두 편에 걸친 긴 포스팅을 읽어 주셔서 감사하다는 마음을 전하며 <strong>Gridsome으로 블로그 개설하기</strong> 포스팅을 마친다. 😃</p>\n<hr>\n<h3 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h3>\n<ul>\n<li><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gridsome.org/</a></li>\n<li><a href=\"https://github.com/gridsome/gridsome-starter-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/gridsome/gridsome-starter-blog</a></li>\n<li><a href=\"https://github.com/tschaub/gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/tschaub/gh-pages</a></li>\n</ul>\n"}},{"node":{"title":"Gridsome으로 블로그 개설하기 - 시작하기에 앞서","path":"/make-blog-with-gridsome-1st/","date":"12. January 2020","timeToRead":2,"description":"Gridsome 이라는 Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)와 gh-pages를 활용하여 블로그를 개설하는 방법을 다룬다. 첫 번째 포스팅은 Gridsome이 무엇인지, 다른 정적 사이트 생성기와 비교하여 어떤 특징이 있는지 간략하게 살펴본다.","content":"<ol>\n<li><a href=\"https://perade.github.io/blog/make-blog-with-gridsome-1st\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome으로 블로그 개설하기 - 시작하기에 앞서</a></li>\n<li><a href=\"https://perade.github.io/blog/make-blog-with-gridsome-2nd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome으로 블로그 개설하기 - 본격적인 블로그 만들기</a></li>\n</ol>\n<hr>\n<h1 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>개요</h1>\n<p>이번 글과 다음 글에서는 <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a> 이라는 Vue.js 기반 정적 사이트 생성기(Static Site Generator, SSG)와 <a href=\"https://github.com/tschaub/gh-pages\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gh-pages</a>를 활용하여 블로그를 개설하는 방법을 다룬다.</p>\n<p>첫 번째 포스팅은 Gridsome과 다른 SSG와의 비교, Gridsome의 장단점 및 선택한 이유 등을 간단하게 설명한다. 두 번째 포스팅은 본격적으로 Gridsome과 gh-pages를 활용하여 어떻게 블로그를 개설하는지 상세하게 설명한다.</p>\n<hr>\n<h1 id=\"gridsome-이란\"><a href=\"#gridsome-%EC%9D%B4%EB%9E%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome 이란</h1>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 120 120' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2cb52e925ab072a4455789e299b2b63f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2cb52e925ab072a4455789e299b2b63f)' width='120' height='120' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAARlAAAEZQAGA43XUAAASHUlEQVR42tVbaWxc13U%2bM1Rt2GnTpE3QBklQNTXQGP0Rx0CdIAnsxrZ2biIpkRQpblooUlxmyFnIGXK4iKQoS1biWJI37eK%2biKT2zbKkykYQpwkKp7XjNm5a2FEapLIjwEHMN/Nev3PvffPeDIfDkWJT0gAH9817dznf2e45980Q3ernbIjodBvREZf8PtXsoMHGtBn9TgS/RMOeTOp3B6i/4QANNFzE9b%2bj/RXoA9Bv8f0yDTWWR8eMeh2iHfcTXeigO%2btzopXoZKsFfALABxpigR9tegQgQgB1FUK5AQEYEJBBk6Axn0EjXgPPDDyTxPf42bBnlM623yvmGPNJIZy6kwRwuotoxCOvJ5soRuNn2z4L0BsV6LAAzMAYYL9bh5A0WICGNozvEbS6uC%2bf8b1pOh5kIewR8x2qc9KJFiLDcadoHiZf9agyUZ%2bTutbK63PtnwZQH4C/A81L0AMNDFqCZaAmWL4vvxu2a/N7JCqMUd/XxNwjHicd33Kbgb/cJbXNn59%2bn2jYpvVRbzGAv00TAD7imQlaCkKPA52IzL7TwnIm/NK/Bt1pcInbCP6VToBvtoLegRqnCngLAXwy6s8SeCQOtHGTpIt5WJhTzdvFOkfqnXSu7XZpHuDZB0UganXQfZ8yfX8lwP9GmHu/O6w0rkDcEnC7BWgyWDZJqQ%2b4b5MALjD4oAXe/Iz7QzB7Q0R1qXXdBly/ReB61E1YoGxRY95HozHgfOg2mP2x5pngJ/wvQjNGNFCl7t%2bx/axrO3EA/ANNBVi4J8R6gdXsavMM/p93A6gKeKdabOCb%2boRpSpOPpAw%2bto/a7ng7dIcVycg/BIs6FuAt8w2aavpSTDJ0dj4tYEqBP91KNs3vU%2bC1ODB6kmCm267DaqxB4wiaHOSO%2biWNg4ZFMvQuzP0HNBX8y6jpi2TIC3ecr13gotpvr2Lb26ei/VF/t8jQpOYT7ePJgGviO4PkOQYbfw/zfh0B9CC064VQ8%2bBSj0IoD9HxwOdtW6tT7QByC56XzxlE%2b6FGeW1md2O%2bIrHNzTTjBIEsJvqHxRjWNKe7I94r2DGqIMyvknHGOSsPnPmZ6W%2b/G9YYmM8UNxQr/cmmB2kQhQoDsLY5PSWts9DYp4c9IxDCt2es1edKw/M0sRYTmzsDP9Vq1hFEl%2bcz%2b%2bPCZutaS%2bKGjmzPc1GY7kCDlsTn7eAjUa2PeH%2bEAum70fl7Shy4JwFzXnG1F9spfHu89w6p9CZUstOvKrpRX60IUGbQSxzt7eDDouDh/GDcv41%2b%2bfwCMQ/HkXG/k17uMMtioitbpLVdupMqvLZ83uZU6dn6RZj9NZHomNvdXODZTYYasYc3r4nOOeZLo48m5PVxCPh4gO7sT59L%2bv6wZ4cwY3PbSuT3M8F/CPBLxPgXqtKiydOYD%2b4F8Jd77nDww82S4ZHWhTTQeF0FvsgsBY3l89wONUYAPlNF7gX0Wq8VV17roLvjc8QttT/ia1d7vjZromPP2Y%2bK/V2WrYfr0uin31Pgg3T3fS50fkrU9VyIWL4fR26rYuNKcNQ7JsY2ZDroYqfy97sRvIz8WSKK24%2bqZmpfCoddZNhznc60LZSgA9KCToXo7v0Me/bazD9Z2aqpg02p6qFGueWdDNzF4F/uvB/7%2bH9Ft77E2pclK/cZ8rxHZ9tk0XIs4KADtUTnO1Nb63yHVd2dC/FBKp8pUvTQg%2b%2bdT6H44TOCM91qjJrjvNkq4vvc8np8kHsItcVL1XLMi1VEB%2bqiR9jfhAAis2d8buuQk7U/7tsRUzOkUq5eBjMnApxsqTX9DpEOc/5/qNYJS0pD0iR3oyOoSU40ozRvnTkPp8vm%2beRVCH0E2SUncHxUt39zYjpQJ1Puky1OkZEeqJPrDIKXgxzDBxpqbHt/Au3bTm0GYQFjTY9It/GBeUxwZo4jq3Ng9KhPXnMGONgwe0E02Oik13pMISE422qCVzqsgo0FuK/WectWzzwcVu81AOw5Ue9beX8iCsszfs%2b/0uld98jA2RJ7bpDsOF2YLQS1r9ahDlU/j/lKIPgemvD3QENrUYt8TjzbW%2bOgV7ZYGjfPJ4YV%2bDGvw5ZxPgRyYZ7tsIwdcfS0aCfQjnifg/B2A0c17a/7ihj79nYS7gsNXxAHFbE1f6z/m6e1XMsLM0VF96Peuff8l8H43mpZA7ywWSVc3mJo%2bj3hTlOKeG5xKOItUhmlg17dSrSzTNYOZlwYV%2bXyufb70fd5aFITx2iTzXMTr8OnTgMNN6jf1WQx2e9%2bS53pR5KUvDLxGfO51a6RRn31ViCa7TPgp%2bjprjzpWSeqTLnetDo0kcT3WBGj3nLFlxxzsE7GhHHlRj/bjnK68bgAw1tz/DzJaVps4/wGqt%2bt0lZ%2bOSnT32QnPWF1spMZPTcYSjHVNYPbZPPfQsu/U2tpCd4Qaaq2eB%2b5xd/EjDX9Vq7tUlv2dFzBps957C4tWp5rct6zv/ZJlvRHlqnPKoCIPM/zf0sy4UGZm8J5PRdDfW6zzG5SZ4vTcUzpMW%2bGGNyI16OUkyYOac%2bpOPLBwT%2bBpfxEMJ/8oCbZIa0RdenD9RPMYJK3Oe5YAYz7/1H5cWoRmCvCl6qlFoc8I8KNrFdniZiTljbUOBQ9JmMBnG2Tc1zufgDgr4vzB/ubqJt/A6ULaztYd50Dmu2Y2x2/BVoCYOZHvd%2bKuoA3N4UU20v0XJXadxun1ClTOEmyZQpgQvm/Q7yaO9smBX6p60HsAjdsFemtC2CwgQWgEe2vuaHe9Oi2nN/K/80skM3u6YpFMpOqdlJ9xtwCYOYP16sA6N1p891Eb4mtZGvUK98N9iEQ8suRc%2b1SiK/v%2bAzm%2bUVc1nozLiBbtnoOurs2QgBPlb4j/KHPlbgK7HPpYChMezcbVL6oRDDiznJSdQoC4K3SPOMf9z2mXqRGYl6uxJ4rRkSfo/7vRF3tUheSoG5LkGO%2bPUqQH8WV6KkLgTGxRQdWfUi0fvEPkRXxFheGO%2bhK62ZH7M8NUgD%2bXIPWPi6T/tIn08idTuRZmcKROwLYnkoVBxr3qy1IUzuB%2bXJVblP8bKjxRZkLYMxJW5o9ro7tToa%2bjHjyrnAVKYRwlOSbJkuwdiwCj8J01K/Tnk0GlT7%2bLlHJ4yPkyjKQI2si0ImCp1GSfBGqU8tqjdYtNmjj0kkpgCec5Momcs1hBadaKObnLscC92LegejbIZ5/1Cuv%2bd6wp4/OtN4bswXySfIFVWyZwfdo8GH0fTv6K5RRn2oVvyb/8cRmPwbwuysjVLkMFv3kDwmgemgTvqxfPE2dRTr8m4ODQftq2OcNqs2ApJ6IiD4bl/wn1Wd9RjBRvcJBDSlYgPmu0RSCuPbngNEJMPWmIL4e91uTmRkfvyN4tVOmxHs3krIip7Ksz0IgXny/BHoLc/wbrOCXSG95f9cVGRbVsM8b1LyKgWsKzyGiTcuLafMKFkCEyp7Q8RDXSwyqWMTAudUhJJ02LIlQ1XIDff9JMLBpmZPWPTG3G3AgHGywhPDwQuuZYcT2zf6mpXkeM2nLWE8i8fIrixuK24Z3bpDf1y92CWAVizTBN2MwiXGVCWIs01SbbqB1c0B7EIP%2bIAZuWqbTJoCtXGoIkvcM9V2jugwWwC4lAJngNOak8NI1IH/yZh6bsRYP1TtjXosNeZwicTI1P5ng1fjFLj7BNi2Lf53mpF0bLMuqWvYvQpmVS8NRDHYS%2bJbpUWzVy6HMjqIFMOefiYGblkVUJyOOdPGsejkPukaN2bJyq8twYBwhRswthCs9UghvfF9miAySTZsrvYlm61zhGAR0tSN5dsn5hel%2b9RlSEXXp6VSTbseQBMcKxvE/5Mv7MzlJbcYzIhBWLdeEmc8kXZEm%2btVmSHVuXiEXb8ojChXN3ykWC7xiMdZdZd3bnH5FWGjV8vAsGEzSqD7TgLAOW4PrMpYKn6gGyOoVJhkJKCKkXJP%2ba/Ll/rV0gZXSBH058ycAt6zJwMcClZesI1cm8x9Owr%2b6jz4sAFemLXiFCu6DVt9UPh4R7jCTdNVq5M7GBFl7xdiKxU7qUtr3zIMQ/CoF96w0rW8h%2bP6N2K0s3vVZ%2bI8IjLXpb1Mw/0%2bVFFfIYOTKCkGbrF0NHXRFRhzJ%2bzXpEUjdQP8C6YeZUhPfRhXry/1kgD%2b/FOBXmUKQPL/S7MDaF6gh2%2bSb29n4ln0YY31mq3J9CLEh26Ek%2bhUElPeFedRlsKR0Ia1YMu9FRL/6zA8w7mFlhguizDZ9zELgX6W6s9Xcq6zdoyHrBQGoLkOz8acn4FkXPLOb1Gf8L3lzvijHK%2bxRK3Bn/QAPGZimAOqqtZN5Lywk78r8b4z5ezXhAuotVYEqn2hr%2bR8JvIKoNZ%2bzVQU%2bz/qVqi93p%2bC1LjNs40lPwKt5TxP93VltatdQc2U9xL7riPqTO%2bv/hHm7MqXEXJhAtobtuy52A1emNCl3FoSQKy1h41InBVfL%2bbhkZmswf1ec6qd9DeJSvvypHH861nCwlRa2uyoNucdLmJtBRWz8xfNpvxdWfP4HBXNlJutF8E7/Oll%2b5cpMU9G8GYLgzpoQhDtLV2TYyH5PgxsY0P7vMM76jYAP2mpb44haQ6gQ2sTjbWVJgCOY%2bgutvKK9kPmztN5W8ADWuiQKM3dW2MZDMh6ZIkL7vpx8ZakqgPI6ASWAgNLa0%2bvuxSI/hokxKE2YeUO2rlo76bb7UsI8xp%2b3D9r7gi1qpyH/diLhclAP3COI9UJr%2bKcz0jK6%2bB4CXBBgnyqT2uf%2bPM78DCFrbF5VAxDXBXjJl56Aj0S8TYv835tzRMy1bpFDKKMSa7YUqgWC%2baZfyVjQvOobcItpAapxZUS1umrtpNvuRwTJxX6Ntom6Sz8Xo2FPtlNE8GZYRwCatbf%2bHCcEH5fjV9yDeQrA14/FvJ4cXkebZf1E9zQoBPzk/hyJ2l%2boICoVHcizLdRawGYRu78GVtfDdHnRMADpwoSs1k563HNNaKkVY/2518D4sxDwd2lb%2badT8v/t6%2b7D2t/AuHaMfxPXhgLPfEQSrDkbL2Fhkb7c30Pjj8QE0YRJW1uB%2basuorzvmL77EpIk9h0NE%2blywhzVxpO4bz6LiDEcS1oLJICmvF9AG1PQeBdcZD0ElA1fX4Z2JWgDrKALzyfQ7y0hwJAa5xNAwnHrJ%2bJBt/EWES2Pb8nPVwE5TRVMRJ2ls0g/kG8GHymAKy1OMHxcMOPPnQbpgjmrTUT2PhGQJhhiTbJVsEBCCYjv8/PgagmGx8nx9vn0JGuaz%2bTpVYtYa7OqWJ20p1JlvXPVLKF8Mz2W/rh13f1g6jy1FbIWWau60KxszetEpMf1DSvSkpDZJ9U14vuEldYN8Fur9nsn9aqdpzU/BR/sWTtTCNvK74MfTVFnEZsVLyKDXfMqXZFxG8i%2bNreaAB5crQG8tPHqJQBfbm2pPaUpJiJPYVDQ3IvXONXpjQNb2W4kJdJMA1goIFomXZExD6THrQf3Anjmq7XgPfAo00Y3dpwdFVYqvbX0JtNQTkpaVWDcUmxtTx1FlZD0hxCMlHYQDLBAgmBIkvEJkn0NXazPsaMDlhkqPA3AX1YJTho9X6UsGsC3ldxiLr7NJrneMgdVpsvg2Fn8NSx4BYIxRGxoyWfzi4B0YYZW%2b3GRHje3NPeuYgb%2bPpThtm3pVgLVCSVuL/sjKzE2oy0ql9%2b5HlujWuDVZ520pagGAniPutca8DE2QdZIGKTLqC5a8/pmSY%2bbJ6LmV8Bxr2PNESjogSivW4qc0QMTVtyego%2bpHH2mQkrTKlYsl%2bgp%2byuYYBfuXUMOYQirCBXqIA0UhoAi4nubIENdGzMoFPNcF%2bPkWJ4nIgIwz9%2b%2bZhrAx7CO9VP8lvw0KEFZAGLXjg2f0GlMLwTRpvLn7hLeJSxz6y37AnWVNIDRnwif7C2DptZK/2wHgPbCaZAGCqvvuo0i6r6m%2bkVEUGNN95YawsI6i94B6J0I0F%2b3UmtUdJ22%2bNRdQvPz6YFf/cM9ys%2bKHdRaaAniuJe18Sh1rO2hjuLXwfgNIYinyg2YpQTDVsIaNYmB8n1%2bzv26S/j%2bh%2bj3BnUXP0tbSzJod%2bWfWwegGQAOczcrS47y39s4z78v5IMPrt4ee8xkwoGdY%2bbf57eW/x2sYCUYDoKOgK6Afg66Bvot6FegN0GXQYfRNwjgebS94qt07pnY4qit0AnhOGmXArsd2/Uz62Dy628Zxv8D0LHA3O7vkIQAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"120\" alt=\"Gridsome\" data-srcset=\"/blog/assets/static/gridsome-logo.1539b60.1cbe8bea32ac70ba1c12ba7d00929237.png 120w\" data-sizes=\"(max-width: 120px) 100vw, 120px\" data-src=\"/blog/assets/static/gridsome-logo.1539b60.1cbe8bea32ac70ba1c12ba7d00929237.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/gridsome-logo.1539b60.1cbe8bea32ac70ba1c12ba7d00929237.png\" width=\"120\" alt=\"Gridsome\"></noscript></p>\n<p>위에서 언급했듯 Gridsome은 Vue.js 기반 정적 사이트 생성기이다. React.js 기반의 <a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gatsby</a>를 떠올리면 이해가 쉽다. 실제로 Gridsome에서 밝히기를 Gatsby로부터 상당 부분 영향을 받았다 하고(심지어 영향뿐만 아니라 Gatsby의 대안이라고 공식문서에서 언급한다.), 구현이나 동작 방식 또한 Gatsby에 익숙한 사람들은 내가 지금 Gatsby를 쓰고 있나 할 정도로 유사하다.</p>\n<p>때문에 Gridsome 역시 단순한 텍스트 문서뿐만 아니라 GraphQL을 활용한 데이터 조작, PWA 지원, SEO 등 각종 웹 최적화, 웹 표준 준수 등 흔히 말하는 모던 웹 사이트를 구축할 수 있도록 기능을 제공한다.</p>\n<hr>\n<h1 id=\"gridsome과-다른-정적-사이트-생성기의-비교\"><a href=\"#gridsome%EA%B3%BC-%EB%8B%A4%EB%A5%B8-%EC%A0%95%EC%A0%81-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%83%9D%EC%84%B1%EA%B8%B0%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gridsome과 다른 정적 사이트 생성기의 비교</h1>\n<p>앞서 말한 Gatsby 외에도 Node.js 기반의 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HEXO</a> 등 여러 가지의 SSG 들이 존재한다. 그 중에서도 Vue.js에 친숙한 사람들은 <a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vuepress</a>를 많이 들어봤을 것이다.</p>\n<p>Vuepress는 Vue.js 팀에서 공식 제공하는 SSG 로서, Gridsome이나 Gatsby만큼은 아니지만 블로그를 운영하기에는 충분한 기능을 제공한다. 또한 Vue.js 진영의 공식 SSG인 만큼 Vue.js와 관련된 각종 플러그인들과 호환성이 뛰어나다.</p>\n<p>반면 Gridsome은 아직 0.X 버전에 머물러 있는 신생(?) SSG 인지라 그만큼 버그도 많고, 레퍼런스와 커뮤니티도 타 SSG에 비해 현저히 부족하다. 특히 i18n 지원이 아직 부족하여 공식 레포지토리에서 영어권 외 국가의 개발자들이 올린 이슈도 심심찮게 볼 수 있다. SSG가 블로그 개설에 많이 활용되는 것을 생각하면 꽤나 크리티컬한 이슈다.</p>\n<p>그럼에도 불구하고 블로그 개설을 위해 Gridsome을 선택한 이유는 <strong>1. Vue.js + GraphQL 환경을 손쉽게 경험해보고 싶었고, 2. 모던 웹을 위한 각종 기능들 및 이미지 처리, 동적 라우팅 등을 꽤 괜찮은 수준으로 자체 지원</strong>해주기 때문이다.</p>\n<p>정답은 아니지만 블로그를 개설하고자 할 때 아래와 같이 생각하면 참고가 될 것이다.</p>\n<pre><code>// 1. 레퍼런스 &#x26; 커뮤니티 활성도\n\nGatsby >>>>>>> Vuepress > Gridsome\n\n// 2. 기능의 다양성\n\nGatsby = Gridsome >>> Vuepress\n\n// 3. 기술의 성숙도(안정성)\n\nGatsby >>> Vuepress >>> Gridsome\n\n// 4. 그래서 결론은?\n\nReact.js에 친숙하거나 관심이 있다\n-> Gatsby\n\nVue.js에 친숙하고, 블로그 정도는 별다른 기능 없이 컴팩트하게 가도 괜찮다.\n여차하면 내가 구현하지 뭐\n-> Vuepress\n\nVue.js에 친숙하고, GraphQL에 관심이 있으며, 아무리 블로그라도 웹 트렌드를\n따라가야한다. 근데 내가 죄다 구현하긴 귀찮다\n-> Gridsome\n</code></pre>\n<hr>\n<p>이번 포스팅에서는 Gridsome이 무엇인지, 또 다른 정적 사이트 생성기와 비교하여 어떤 특징이 있는지 간략하게 살펴보았다. 다음 포스팅에서는 본격적으로 Gridsome을 활용하여 어떻게 블로그를 개설하는지 상세하게 알아보도록 하겠다.</p>\n<hr>\n<h3 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h3>\n<ul>\n<li><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://gridsome.org/</a></li>\n<li><a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vuepress.vuejs.org/</a></li>\n</ul>\n"}}]}}},"context":{}}